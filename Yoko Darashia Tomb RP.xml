<?xml version="1.0" encoding="UTF-8"?>
<WindbotSettings>
    <Healer>
        <SpellHealer enabled="yes">
            <HealRule name="NewHealRule" spell="Light Healing" condition="Health Percent below" conditionMin="70" conditionMax="70" extraCondition="No Extra Condition" extraConditionMin="0" extraConditionMax="0" enabled="yes" spamMin="200" spamMax="500" triggerKey="&lt;no key&gt;" dontOverrideActions="no"/>
        </SpellHealer>
        <PotionHealer enabled="yes">
            <HealRule name="NewHealRule" spell="Health Potion" condition="Health below" conditionMin="50" conditionMax="50" extraCondition="No Extra Condition" extraConditionMin="0" extraConditionMax="0" enabled="yes" spamMin="200" spamMax="500" triggerKey="&lt;no key&gt;" dontOverrideActions="no"/>
            <HealRule name="NewHealRule1" spell="Mana Potion" condition="Mana below" conditionMin="20" conditionMax="20" extraCondition="No Extra Condition" extraConditionMin="0" extraConditionMax="0" enabled="yes" spamMin="200" spamMax="500" triggerKey="&lt;no key&gt;" dontOverrideActions="no"/>
        </PotionHealer>
        <ConditionHealer enabled="no"/>
        <ManaTrainer manaTrainCondition="Mana Percent above" manaTrainMin="87" manaTrainMax="93" enabled="no"/>
    </Healer>
    <Scripter>
        <HotkeyScripts/>
        <PersistentScripts>
            <PersistentScript name="scripts" script="auto(500)&#10;&#10;pvpe = getuseroption('pvpe')&#10;mainbp = getuseroption('mainbp')&#10;goldbp = getuseroption('goldbp')&#10;lootbp = getuseroption('lootbp')&#10;maindpbp = getuseroption('maindpbp')&#10;raredpbp = getuseroption('raredpbp')&#10;foodbp = getuseroption('foodbp')&#10;&#10;usealertonspawn = getuseroption('usealertonspawn')&#10;huntlowerlvl = getuseroption('huntlowerlvl')&#10;&#10;mptype = getuseroption('mptype')&#10;maxmp = getuseroption('maxmp')&#10;minmp = getuseroption('minmp')&#10;hptype = getuseroption('hptype')&#10;maxhp = getuseroption('maxhp')&#10;minhp = getuseroption('minhp')&#10;ammotype = getuseroption('ammotype')&#10;maxammo = getuseroption('maxammo')&#10;minammo = getuseroption('minammo')&#10;&#10;setlootingdestination('mainbp', mainbp)&#10;setlootingdestination('lootbp', lootbp)&#10;setlootingdestination('goldbp', goldbp)&#10;setlootingdestination('maindpbp', maindpbp)&#10;setlootingdestination('raredpbp', raredpbp)&#10;&#10;if $posz == 9 and (itemcount(mptype) &lt; minmp or itemcount(hptype) &lt; minhp or itemcount(ammotype) &lt; minammo) then&#10;setsetting('Targeting/Creatures/Crypt Shambler/Setting1/OnlyIfTrapped', 'yes')&#10;setsetting('Targeting/Creatures/ghoul/Setting1/OnlyIfTrapped', 'yes')&#10;setsetting('Targeting/Creatures/Skeleton/Setting1/OnlyIfTrapped', 'yes')&#10;gotolabel(&quot;start&quot;,&quot;Leave&quot;)&#10;end&#10;&#10;if getuseroption('takefoodfromdp') then&#10;showuseroption('foodtype',true)&#10;showuseroption('foodbp',true)&#10;showuseroption('amountoffood',true)&#10;else&#10;showuseroption('foodtype',false)&#10;showuseroption('foodbp',false)&#10;showuseroption('amountoffood',false)&#10;&#10;end&#10;" enabled="yes"/>
            <PersistentScript name="functions" script="function depot()&#10;setsetting('Looting/OpenNextBP', 'no')&#10;closewindows()&#10;waitping(3)&#10;while windowcount() &lt; 2 do&#10;closewindows()&#10;waitping(3)&#10;openitem(mainbp, &quot;back&quot;, true)&#10;waitping(3)&#10;resizewindows()&#10;waitping(3)&#10;openitem(lootbp,mainbp,true)&#10;waitping(3)&#10;resizewindows()&#10;end&#10;&#10;&#10;while windowcount(&quot;Depot Chest&quot;) == 0 do&#10;&#9;opendepot()&#10;waitping(3)&#10;end&#10;&#10;&#10;while windowcount(lootbp) == 0 do&#10;openitem(lootbp,mainbp,true)&#10;waitping(3)&#10;end&#10;&#10;&#10;while windowcount(maindpbp) == 0 do &#10;openitem(maindpbp, &quot;Depot Chest&quot;) &#10;waitping(3)&#10;resizewindows(1000,maindpbp) &#10;waitping(3)&#10;end &#10;&#10;&#10;&#10;setsetting('Looting/OpenNextBP', 'no')&#10;waitping()&#10;&#10;&#10;local CONFIG = {&#10;    LOOT_BACKPACK = lootbp,&#10;    MAIN_DP_BACKPACK = maindpbp,&#10;    STACKABLE_BACKPACK = raredpbp,&#10;    NOT_STACKABLE_BACKPACK = raredpbp,&#10;}&#10; &#10;clearlastonto()&#10; &#10;while (true) do&#10;&#9;foreach lootingitem ITEM_ENTRY do&#10;if ITEM_ENTRY.id == 3035 then&#10;else&#10;&#9;&#9;while (itemcount(ITEM_ENTRY.id, CONFIG.LOOT_BACKPACK) &gt; 0) do&#10;&#10;&#9;&#9;&#9;if (itemproperty(ITEM_ENTRY.id, ITEM_STACKABLE)) then&#10;&#9;&#9;&#9;&#9;moveitemsonto(ITEM_ENTRY.id, CONFIG.STACKABLE_BACKPACK, 1, CONFIG.MAIN_DP_BACKPACK, CONFIG.LOOT_BACKPACK) &#10;waitping(3)&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;moveitemsonto(ITEM_ENTRY.id, CONFIG.NOT_STACKABLE_BACKPACK, $lastonto, CONFIG.MAIN_DP_BACKPACK, CONFIG.LOOT_BACKPACK) &#10;waitping(3)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;end&#10;end&#10;&#10; &#10;    if (itemcount(CONFIG.LOOT_BACKPACK, CONFIG.LOOT_BACKPACK) &gt; 0) then&#10;        openitem(CONFIG.LOOT_BACKPACK, CONFIG.LOOT_BACKPACK, false) waitcontainer(CONFIG.LOOT_BACKPACK, false)&#10;    else&#10;        break&#10;    end&#10; &#10;    wait(100)&#10;end&#10;end&#10;&#10;&#10;&#10;function takefood()&#10;setsetting('Looting/OpenNextBP', 'no')&#10;closewindows()&#10;waitping(3)&#10;while windowcount() &lt; 1 do&#10;closewindows()&#10;waitping(3)&#10;openitem(mainbp, &quot;back&quot;, true)&#10;waitping(3)&#10;resizewindows()&#10;end&#10;&#10;&#10;while windowcount(&quot;Depot Chest&quot;) == 0 do&#10;&#9;opendepot()&#10;waitping(3)&#10;end&#10;&#10;&#10;&#10;&#10;while windowcount(foodbp) == 0 do &#10;openitem(foodbp, &quot;Depot Chest&quot;) &#10;waitping(3)&#10;resizewindows() &#10;waitping(3)&#10;end &#10;wait(1000)&#10;ftype = getuseroption('foodtype')&#10;for i=1,3 do&#10;foodtotake = getuseroption('amountoffood')-itemcount(ftype,mainbp)&#10;if foodtotake &gt; 0 then&#10;moveitems(ftype,mainbp,foodbp,foodtotake)&#10;print(&quot;trying to move &quot;..ftype..&quot; amount: &quot;..foodtotake)&#10;end&#10;end&#10;&#10;end&#10;&#10;&#10;function buyitem(itemname,max)&#10;if windowcount(mainbp) &lt; 1 then&#10;closewindows()&#10;waitping(3)&#10;&#9;while windowcount() &lt; 1 do&#10;&#9;&#9;closewindows()&#10;waitping(3)&#10;&#9;&#9;openitem(mainbp, &quot;back&quot;, true)&#10;waitping(3)&#10;&#9;&#9;resizewindows()&#10;end&#10;end&#10;::opentradeagainammo::&#10;if not $tradeopen then&#10;if not ischannel('NPCs') then&#10;say('hi')&#10;wait(1500)&#10;else&#10;npcsay('hi')&#10;wait(300)&#10;end&#10;&#10;npcsay(&quot;trade&quot;)&#10;wait(1000)&#10;end&#10;if not $tradeopen then&#10;goto opentradeagainammo&#10;end&#10;amount6 = 0&#10;amount6 = tonumber(max) - itemcount(itemname)&#10;while amount6 &gt; 0 and islocation(1) do &#10;&#9;buyitems(itemname, amount6) &#10;&#9;waitping(2,3)&#10;&#9;amount6 = amount6-100&#10;end&#10;end&#10;&#10;function withdrawmoney()&#10;closewindows()&#10;waitping(3)&#10;while windowcount() &lt; 1 do&#10;closewindows()&#10;waitping(3)&#10;openitem(mainbp, &quot;back&quot;, true)&#10;waitping(3)&#10;resizewindows()&#10;end&#10;&#10;Mana = math.positive(maxmp - itemcount(mptype)) * itemcost(mptype) &#10;Hp = math.positive(maxhp - itemcount(hptype)) * itemcost(hptype) &#10;AMMO = math.positive(maxammo - itemcount(ammotype)) * itemcost(ammotype)&#10;Total = Mana + Hp + AMMO&#10;&#10;&#10;if Total &gt; 0 then&#10;&#9;npctalk(&quot;hi&quot;,&quot;deposit all&quot;,&quot;yes&quot;, &quot;withdraw &quot;..Total, &quot;yes&quot;, &quot;balance&quot;)&#10;end&#10;end&#10;&#10;&#10;function suppshop()&#10;sellflasks()&#10;&#10;buyitem(mptype,maxmp)&#10;buyitem(hptype,maxhp)&#10;&#10;&#10;end&#10;&#10;&#10;function ammoshop()&#10;&#10;&#10;buyitem(ammotype,maxammo)&#10;&#10;end&#10;&#10;&#10;function bpsforhunt()&#10;closewindows()&#10;waitping(3)&#10;&#9;while windowcount() &lt; 3 do&#10;&#9;&#9;closewindows()&#10;waitping(3)&#10;&#9;&#9;openitem(mainbp, &quot;back&quot;, true)&#10;waitping(3)&#10;&#9;&#9;resizewindows()&#10;waitping(3)&#10;&#9;&#9;openitem(goldbp,mainbp,true)&#10;waitping(3)&#10;&#9;&#9;resizewindows()&#10;waitping(3)&#10;&#9;&#9;openitem(lootbp,mainbp,true)&#10;waitping(3)&#10;&#9;&#9;resizewindows()&#10;&#9;&#9;&#10;&#10;end&#10;end" enabled="yes"/>
            <PersistentScript name="sareas" script="auto(100)&#10;&#10;if maround(10) &gt; 1 then&#10;setsetting('Cavebot/SpecialAreas/SArea11/Policy', 'None')&#10;setsetting('Cavebot/SpecialAreas/SArea13/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea11/Policy', 'Targeting')&#10;setsetting('Cavebot/SpecialAreas/SArea13/Policy', 'Targeting')&#10;end&#10;&#10;&#10;if $posx &lt;= 33272 then&#10;setsetting('Cavebot/SpecialAreas/SArea1/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea1/Policy', 'Targeting')&#10;end&#10;&#10;if $posy &gt; 32452 and $posx &gt; 33255 then&#10;setsetting('Cavebot/SpecialAreas/SArea2/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea2/Policy', 'None')&#10;end&#10;&#10;if $posx &gt;= 33261 then&#10;setsetting('Cavebot/SpecialAreas/SArea3/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea3/Policy', 'Targeting')&#10;end&#10;&#10;if $posx &lt;= 33257 then&#10;setsetting('Cavebot/SpecialAreas/SArea4/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea4/Policy', 'Targeting')&#10;end&#10;&#10;if $posy &gt; 32442 then&#10;setsetting('Cavebot/SpecialAreas/SArea5/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea5/Policy', 'None')&#10;end&#10;&#10;if $posy &gt; 32471 then&#10;setsetting('Cavebot/SpecialAreas/SArea6/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea6/Policy', 'None')&#10;end&#10;&#10;if $posy &lt; 32475 then&#10;setsetting('Cavebot/SpecialAreas/SArea8/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea8/Policy', 'None')&#10;end&#10;&#10;if $posx &gt;= 33261 then&#10;setsetting('Cavebot/SpecialAreas/SArea7/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea7/Policy', 'Targeting')&#10;end&#10;&#10;if $posx &lt;= 33257 then&#10;setsetting('Cavebot/SpecialAreas/SArea9/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea9/Policy', 'Targeting')&#10;end&#10;&#10;if $posx &gt;= 33261 then&#10;setsetting('Cavebot/SpecialAreas/SArea10/Policy', 'None')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea10/Policy', 'Targeting')&#10;end&#10;&#10;if $posy &lt; 32476 then&#10;setsetting('Cavebot/SpecialAreas/SArea14/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea14/Policy', 'None')&#10;end&#10;&#10;&#10;if $posy &gt; 32471 then&#10;setsetting('Cavebot/SpecialAreas/SArea12/Policy', 'Targeting')&#10;else&#10;setsetting('Cavebot/SpecialAreas/SArea12/Policy', 'None')&#10;end" enabled="yes"/>
            <PersistentScript name="Alerts" script="auto(1000)&#10;    -- local SCRIPT_VERSION = '1.0.1'&#10;if $wptsection == &quot;Hunt&quot; then&#10;    local alerts = {&#10;    {&#10;    name = 'Player on Screen',&#10;    sound = 'playeronscreen.wav',&#10;&#10;    playSound = usealertonspawn,&#10;    pauseBot = false,&#10;    logout = false,&#10;    safelist = {}&#10;    },&#10;    {&#10;    name = 'Player Attacking',&#10;    sound = 'playerattacking.wav',&#10;&#10;    playSound = getuseroption('alertonspawn'),&#10;    pauseBot = false,&#10;    logout = false,&#10;    safelist = {getuseroption('friendname')}&#10;    },&#10;    {&#10;    name = 'Monster Attacking',&#10;    sound = 'monsterattacking.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    safelist = {'Rat', 'Bat'}&#10;    },&#10;    {&#10;    name = 'Private Message',&#10;    sound = 'privatemessage.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    safelist = {'Bubble', 'Cachero'}&#10;    },&#10;    {&#10;    name = 'Default Message',&#10;    sound = 'defaultmessage.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    safelist = {'Bubble', 'Cachero'}&#10;    },&#10;    {&#10;    name = 'GM Detected',&#10;    sound = 'gmdetected.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false&#10;    },&#10;    {&#10;    name = 'Disconnected',&#10;    sound = 'disconnected.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false&#10;    },&#10;    {&#10;    name = 'Character Stuck',&#10;    sound = 'characterstuck.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    stuckTime = 30000 -- ms&#10;    },&#10;    {&#10;    name = 'Health Below',&#10;    sound = 'lowhealth.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    pcBelow = 50&#10;    },&#10;    {&#10;    name = 'Mana Below',&#10;    sound = 'lowmana.wav',&#10;&#10;    playSound = false,&#10;    pauseBot = false,&#10;    logout = false,&#10;    pcBelow = 50&#10;    }&#10;    }&#10;&#10;    -- Do not edit below this line&#10;&#10;    do&#10;    local tests = {&#10;    function(safelist) return paroundignore(10, table.unpack(safelist)) &gt; 0 end,&#10;    function(safelist) return $pattacker.id ~= 0 and not table.find(safelist, $pattacker.name:lower()) end,&#10;    function(safelist) return $mattacker.id ~= 0 and not table.find(safelist, $mattacker.name:lower()) end,&#10;    function(safelist) foreach newmessage m do if m.type == MSG_PVT then return true end end return false end,&#10;    function(safelist) foreach newmessage m do if m.type == MSG_WHISPER or m.type == MSG_DEFAULT or m.type == MSG_YELL then return true end end return false end,&#10;    function() foreach creature c do if c.name:starts('GM') or c.name:starts('CM') then return true end end return false end,&#10;    function() return not $connected end,&#10;    function(stuckTime) return $standtime &gt; stuckTime end,&#10;    function(pcBelow) return $hppc &lt; pcBelow end,&#10;    function(pcBelow) return $mppc &lt; pcBelow end&#10;    }&#10;&#10;    for i = 1, #alerts do&#10;    local alert = alerts[i]&#10;    alert.test = tests[i]&#10;&#10;    if alert.safelist then&#10;    table.lower(alert.safelist)&#10;    end&#10;    end&#10;    end&#10;&#10;&#10;    auto(100)&#10;    listas('Alerts')&#10;    for _, v in ipairs(alerts) do&#10;    if v.test(v.safelist or v.stuckTime or v.pcBelow) then&#10;    if v.playSound then&#10;    playsound(v.sound)&#10;    end&#10;    if v.pauseBot then&#10;    pausebot(true)&#10;    end&#10;    if v.logout then&#10;    xlog()&#10;    end&#10;    end&#10;    end&#10;end" enabled="yes"/>
            <PersistentScript name="eatfood" script="auto(60*1000)&#10;&#10;for i=1,5 do&#10;eatfood()&#10;end" enabled="yes"/>
        </PersistentScripts>
    </Scripter>
    <HUDs>
        <HUDScripts>
            <HUDScript name="generalinfoo" script="init start&#13;&#10;&#9;-- local SCRIPT_VERSION = '1.0.0'&#13;&#10;&#9;&#13;&#10;&#9;local fontsize = 10&#13;&#10;&#9;local fontspacing = fontsize + 6&#13;&#10;&#9;setfontstyle(&quot;MS Serif&quot;, 10, 100, 0xCCCCCC, 1, 0x555555)&#13;&#10;&#9;&#13;&#10;&#9;local displayontitle = true -- set it to false to display it as a rectangular info instead&#13;&#10;&#9;local maxsize = 220&#13;&#10;&#9;&#13;&#10;&#9;setmaskcolorxp(0)&#13;&#10;init end&#13;&#10;&#13;&#10;auto(100)&#13;&#10;local info = {&#13;&#10;&#9;{color = 0xff5577, text = 'Exp/h: ', value = num($exphour)},&#13;&#10;&#9;{color = 0xcccccc, text = 'Ping: ', value = num($pingaverage)},&#13;&#10;&#9;{color = 0xc6b2ea, text = 'ItemID: ', value = $cursorinfo.id},&#13;&#10;&#9;{color = 0xc6b2ea, text = 'x: ', value = $cursorinfo.x},&#13;&#10;&#9;{color = 0xc6b2ea, text = 'y: ', value = $cursorinfo.y},&#13;&#10;&#9;{color = 0xc6b2ea, text = 'z: ', value = $cursorinfo.z},&#13;&#10;}&#13;&#10;&#13;&#10;if (displayontitle) then&#13;&#10;&#9;local x = 0&#13;&#10;&#9;for _,j in ipairs(info) do&#13;&#10;&#9;&#9;local str = j.text .. j.value&#13;&#10;&#9;&#9;local w = measurestring(str)&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;setfontcolor(j.color)&#13;&#10;&#9;&#9;drawtext(str, x, 0)&#13;&#10;&#9;&#9;x = x + w + 50&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;setposition($clientwin.left + 30, $clientwin.top - 21)&#13;&#10;else&#13;&#10;&#9;for i,j in ipairs(info) do&#13;&#10;&#9;&#9;local w = measurestring(j.value)&#13;&#10;&#9;&#9;local posy = (i-1)*fontspacing&#13;&#10;&#9;&#9;&#13;&#10;&#9;&#9;setfontcolor(j.color)&#13;&#10;&#9;&#9;drawtext(j.text, 2, posy)&#13;&#10;&#9;&#9;drawtext(j.value, maxsize-w, posy)&#13;&#10;&#9;end&#13;&#10;&#9;&#13;&#10;&#9;setposition($worldwin.left+20, $worldwin.top+8)&#13;&#10;end" enabled="no" refreshRate="100"/>
            <HUDScript name="YokoMMH" script="init start&#10;&#9;--&#10;&#9;--                        88                                                                  &#10;&#9;--                        &quot;&quot;                                                ,d                &#10;&#9;--                                                                          88                &#10;&#9;--             ,adPPYba,  88  8b,dPPYba,  88,dPYba,,adPYba,   ,adPPYYba,  MM88MMM  ,adPPYba,  &#10;&#9;--             I8[    &quot;&quot;  88  88P'   &quot;Y8  88P'   &quot;88&quot;    &quot;8a  &quot;&quot;     `Y8    88    a8P_____88  &#10;&#9;--              `&quot;Y8ba,   88  88          88      88      88  ,adPPPPP88    88    8PP&quot;&quot;&quot;&quot;&quot;&quot;&quot;  &#10;&#9;--             aa    ]8I  88  88          88      88      88  88,    ,88    88,   &quot;8b,   ,aa  &#10;&#9;--   Author:   `&quot;YbbdP&quot;'  88  88          88      88      88  `&quot;8bbdP&quot;Y8    &quot;Y888  `&quot;Ybbd8&quot;'  &#10;&#9;--   &#10;&#9;--   Monitor My Hunting!&#10;&#9;--&#10;&#9;--   Version: 1.0&#10;&#9;--   Created: 29.12.2013&#10;&#9;--   Last update: 29.12.2013&#10;&#9;--&#10;&#10;&#9;local MMH = {&#10;&#9;&#9;SHOW_ALL_ITEMS = false,&#10;&#9;&#9;SHOW_ALL_SUPPLIES = false,&#10;&#9;}&#10;&#10;&#9;-- [[ Do not change anything below this line. ]] --&#10;&#10;&#9;-- [[ COLORS ]] --&#10;&#9;MMH.COLORS = {}&#10;&#9;MMH.COLORS.FONT_COLOR = color(255, 255, 255, 0)&#10;&#9;MMH.COLORS.SECTION_HEADER_BACKGROUND = {0.0, color(36, 68, 105, 20), 0.23, color(39, 73, 114, 20), 0.76, color(21, 39, 60, 20)}&#10;&#9;MMH.COLORS.ENTRY_NAME_BACKGROUND = {0.0, color(41, 105, 100, 105), 0.76, color(37, 94, 50, 50), 0.23, color(19, 19, 19, 20)}&#10;&#9;MMH.COLORS.ENTRY_VALUE_BACKGROUND = {0.0, color(19, 19, 19, 20), 0.23, color(37, 94, 50, 50), 0.76, color(41, 105, 100, 105)}&#10;&#9;MMH.COLORS.RESULT_POSITIVE_BACKGROUND = {0.0, color(65, 96, 12, 20), 0.23, color(67, 99, 13, 20), 0.76, color(36, 52, 6, 20)}&#10;&#9;MMH.COLORS.RESULT_NEGATIVE_BACKGROUND = {0.0, color(90, 12, 15, 20), 0.23, color(98, 13, 17, 20), 0.76, color(52, 6, 9, 20)}&#10;&#9;MMH.COLORS.RESET_BUTTON_BACKGROUND = {0.0, color(100, 255, 100, 100), 0.23, color(50, 100, 255, 100), 0.76, color(100, 100, 100, 255)}&#10;&#10;&#9;-- [[ ELEMENTS ]] --&#10;&#9;MMH.ELEMENTS = {}&#10;&#9;MMH.ELEMENTS.RESET_BUTTON = -1&#10;&#9;MMH.ELEMENTS.SWITCH_ITEMS_LOOTED = -1&#10;&#9;MMH.ELEMENTS.SWITCH_SUPPLIES_USED = -1&#10;&#10;&#9;-- [[ SECTION STATES ]] --&#10;&#9;MMH.SECTIONS = {}&#10;&#9;MMH.SECTIONS.ITEMS_LOOTED = true&#10;&#9;MMH.SECTIONS.SUPPLIES_USED = true&#10;&#10;&#9;-- [[ OTHERS ]] --&#9;&#10;&#9;filterinput(false, true, false, false)&#10;&#10;&#9;local MOVING, TEMP, MOVED = false, {0, 0}, {0, 0}&#10;&#10;&#9;function inputevents(e)&#10;&#9;&#9;if (e.type == IEVENT_LMOUSEDOWN) then&#10;&#9;&#9;&#9;if (e.elementid == MMH.ELEMENTS.RESET_BUTTON) then&#10;&#9;&#9;&#9;&#9;resetcharactertime()&#10;&#9;&#9;&#9;&#9;resetlootcounter()&#10;&#9;&#9;&#9;&#9;resetexpcounter()&#10;&#9;&#9;&#9;elseif (e.elementid == MMH.ELEMENTS.SWITCH_ITEMS_LOOTED) then&#10;&#9;&#9;&#9;&#9;MMH.SECTIONS.ITEMS_LOOTED = not MMH.SECTIONS.ITEMS_LOOTED&#10;&#9;&#9;&#9;elseif (e.elementid == MMH.ELEMENTS.SWITCH_SUPPLIES_USED) then&#10;&#9;&#9;&#9;&#9;MMH.SECTIONS.SUPPLIES_USED = not MMH.SECTIONS.SUPPLIES_USED&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#10;&#9;&#9;if (e.type == IEVENT_MMOUSEDOWN) then&#10;&#9;&#9;&#9;MOVING, TEMP = true, {$cursor.x - MOVED[1], $cursor.y - MOVED[2]}&#10;&#9;&#9;end&#10;&#10;&#9;&#9;if (e.type == IEVENT_MMOUSEUP) then&#10;&#9;&#9;&#9;MOVING = false&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;setmaskcolorxp(0)&#10;init end&#10;&#10;if (MOVING) then&#10;    auto(10)&#10;    MOVED = {$cursor.x - TEMP[1], $cursor.y - TEMP[2]}&#10;end&#10;&#10;setposition($clientwin.right - 424 + MOVED[1], $worldwin.top + MOVED[2])&#10;setfontstyle('Tahoma', 8, 75, MMH.COLORS.FONT_COLOR, 1, color(0, 0, 0, 20))&#10;&#10;local ROW_QUANTITY, STRING_WIDTH, STRING_HEIGHT = 0, measurestring('TEMP')&#10;local ITEMS_LOOTED_WORTH, ITEM_LOOTED_QUANTITY, ITEM_LOOTED_WORTH = 0, 0, 0&#10;local SUPPLIES_USED_WORTH, SUPPLY_USED_QUANTITY, SUPPLY_USED_WORTH = 0, 0, 0&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;drawroundrect(0, 0, 240, 20, 2, 2)&#10;drawtext('Monitor My Hunting v1.0', 6, 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;addgradcolors(unpack(MMH.COLORS.RESET_BUTTON_BACKGROUND))&#10;MMH.ELEMENTS.RESET_BUTTON = drawroundrect(196, 0, 44, 20, 2, 2)&#10;drawtext('RESET', 202, 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfontsize(7)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;drawroundrect(0, 23, 240, 15, 2, 2)&#10;drawtext('Looting Accuracy', 6, 23 + 15 / 2 - STRING_HEIGHT * 0.5 + 1)&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;addgradcolors(unpack(MMH.COLORS.ENTRY_VALUE_BACKGROUND))&#10;drawroundrect(130, 23, 110, 15, 2, 2)&#10;drawtext(string.format('%.2f', $lootaccuracy) .. '%', 136, 23 + 15 / 2 - STRING_HEIGHT * 0.5 + 1)&#10;&#10;setfontsize(8)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;addgradcolors(unpack(MMH.COLORS.SECTION_HEADER_BACKGROUND))&#10;drawroundrect(0, 41, 240, 20, 2, 2)&#10;drawtext('ITEMS LOOTED', 6, 41 + 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;if (MMH.SECTIONS.ITEMS_LOOTED) then&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_POSITIVE_BACKGROUND))&#10;else&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_NEGATIVE_BACKGROUND))&#10;end&#10;MMH.ELEMENTS.SWITCH_ITEMS_LOOTED = drawroundrect(220, 41, 20, 20, 2, 2)&#10;drawtext('X', 228, 41 + 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfontsize(7)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;foreach lootingitem ItemEntry do&#10;&#9;if (MMH.SHOW_ALL_ITEMS or ItemEntry.amountlooted &gt; 0) then&#10;&#9;&#9;ITEM_LOOTED_QUANTITY = ItemEntry.amountlooted&#10;&#9;&#9;ITEM_LOOTED_WORTH = ItemEntry.sellprice * ITEM_LOOTED_QUANTITY&#10;&#10;&#9;&#9;if (MMH.SECTIONS.ITEMS_LOOTED) then&#10;&#9;&#9;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;&#9;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;&#9;&#9;&#9;drawroundrect(0, 64 + ROW_QUANTITY * 18, 240, 15, 2, 2)&#10;&#9;&#9;&#10;&#9;&#9;&#9;setcompositionmode(CompositionMode_SourceOver)&#10;&#9;&#9;&#9;drawitem(ItemEntry.id, 6, 64 + ROW_QUANTITY * 18, 50, 100)&#10;&#9;&#9;&#9;setcompositionmode(CompositionMode_Automatic)&#10;&#10;&#9;&#9;&#9;drawtext(((#ItemEntry.name &gt; 16 and string.match(string.sub(ItemEntry.name, 1, 16), '(.-)%s?$') .. '...') or ItemEntry.name):capitalizeall(), 28, 64 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;&#9;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;&#9;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_VALUE_BACKGROUND))&#10;&#9;&#9;&#9;drawroundrect(130, 64 + ROW_QUANTITY * 18, 110, 15, 2, 2)&#10;&#9;&#9;&#9;drawtext(num(ITEM_LOOTED_QUANTITY) .. ' (' .. math.floor(ITEM_LOOTED_WORTH / 100) / 10 .. 'K)', 136, 64 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;&#9;&#9;ROW_QUANTITY = ROW_QUANTITY + 1&#10;&#9;&#9;end&#10;&#10;&#9;&#9;ITEMS_LOOTED_WORTH = ITEMS_LOOTED_WORTH + ITEM_LOOTED_WORTH&#10;&#9;end&#10;end&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;drawroundrect(0, 64 + ROW_QUANTITY * 18, 240, 15, 2, 2)&#10;drawtext('Total: ' .. num(ITEMS_LOOTED_WORTH) .. ' GPs', 6, 64 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;ROW_QUANTITY = ROW_QUANTITY + 1&#10;&#10;setfontsize(8)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;addgradcolors(unpack(MMH.COLORS.SECTION_HEADER_BACKGROUND))&#10;drawroundrect(0, 64 + ROW_QUANTITY * 18, 240, 20, 2, 2)&#10;drawtext('SUPPLIES USED', 6, 64 + ROW_QUANTITY * 18 + 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;if (MMH.SECTIONS.SUPPLIES_USED) then&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_POSITIVE_BACKGROUND))&#10;else&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_NEGATIVE_BACKGROUND))&#10;end&#10;MMH.ELEMENTS.SWITCH_SUPPLIES_USED = drawroundrect(220, 64 + ROW_QUANTITY * 18, 20, 20, 2, 2)&#10;drawtext('X', 228, 64 + ROW_QUANTITY * 18 + 20 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;setfontsize(7)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;foreach supplyitem ItemEntry do&#10;&#9;if (MMH.SHOW_ALL_SUPPLIES or ItemEntry.amountused &gt; 0) then&#10;&#9;&#9;SUPPLY_USED_QUANTITY = ItemEntry.amountused&#10;&#9;&#9;SUPPLY_USED_WORTH = ItemEntry.buyprice * SUPPLY_USED_QUANTITY&#10;&#10;&#9;&#9;if (MMH.SECTIONS.SUPPLIES_USED) then&#10;&#9;&#9;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;&#9;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;&#9;&#9;&#9;drawroundrect(0, 87 + ROW_QUANTITY * 18, 240, 15, 2, 2)&#10;&#10;&#9;&#9;&#9;setcompositionmode(CompositionMode_SourceOver)&#10;&#9;&#9;&#9;drawitem(ItemEntry.id, 6, 87 + ROW_QUANTITY * 18, 50, 100)&#10;&#9;&#9;&#9;setcompositionmode(CompositionMode_Automatic)&#10;&#10;&#9;&#9;&#9;drawtext(((#ItemEntry.name &gt; 16 and string.match(string.sub(ItemEntry.name, 1, 16), '(.-)%s?$') .. '...') or ItemEntry.name):capitalizeall(), 28, 87 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;&#9;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;&#9;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_VALUE_BACKGROUND))&#10;&#9;&#9;&#9;drawroundrect(130, 87 + ROW_QUANTITY * 18, 110, 15, 2, 2)&#10;&#9;&#9;&#9;drawtext(num(SUPPLY_USED_QUANTITY) .. ' (' .. math.floor(SUPPLY_USED_WORTH / 100) / 10 .. 'K)', 136, 87 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;&#9;&#9;ROW_QUANTITY = ROW_QUANTITY + 1&#10;&#9;&#9;end&#10;&#10;&#9;&#9;SUPPLIES_USED_WORTH = SUPPLIES_USED_WORTH + SUPPLY_USED_WORTH&#10;&#9;end&#10;end&#10;&#10;if (MMH.SECTIONS.SUPPLIES_USED) then&#10;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;&#9;drawroundrect(0, 87 + ROW_QUANTITY * 18, 240, 15, 2, 2)&#10;&#10;&#9;setcompositionmode(CompositionMode_SourceOver)&#10;&#9;drawitem(3031, 6, 87 + ROW_QUANTITY * 18, 50, 100)&#10;&#9;setcompositionmode(CompositionMode_Automatic)&#10;&#10;&#9;drawtext('Money Spent', 28, 87 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;&#9;addgradcolors(unpack(MMH.COLORS.ENTRY_VALUE_BACKGROUND))&#10;&#9;drawroundrect(130, 87 + ROW_QUANTITY * 18, 110, 15, 2, 2)&#10;&#9;drawtext(num($moneyspent) .. ' (' .. math.floor($moneyspent / 100) / 10 .. 'K)', 136, 87 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;&#9;ROW_QUANTITY = ROW_QUANTITY + 1&#10;end&#10;&#10;SUPPLIES_USED_WORTH = SUPPLIES_USED_WORTH + $moneyspent&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;addgradcolors(unpack(MMH.COLORS.ENTRY_NAME_BACKGROUND))&#10;drawroundrect(0, 87 + ROW_QUANTITY * 18, 240, 15, 2, 2)&#10;drawtext('Total: ' .. num(SUPPLIES_USED_WORTH) .. ' GPs', 6, 87 + ROW_QUANTITY * 18 + 15 / 2 - STRING_HEIGHT * 0.5)&#10;&#10;ROW_QUANTITY = ROW_QUANTITY + 1&#10;&#10;setfontsize(8)&#10;&#10;STRING_WIDTH, STRING_HEIGHT = measurestring('TEMP')&#10;&#10;setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;if (ITEMS_LOOTED_WORTH &gt;= SUPPLIES_USED_WORTH) then&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_POSITIVE_BACKGROUND))&#10;else&#10;&#9;addgradcolors(unpack(MMH.COLORS.RESULT_NEGATIVE_BACKGROUND))&#10;end&#10;drawroundrect(0, 87 + ROW_QUANTITY * 18, 240, 20, 2, 2)&#10;drawtext(((ITEMS_LOOTED_WORTH &gt;= SUPPLIES_USED_WORTH and ('PROFIT: ')) or ('WASTE: ')) .. num(ITEMS_LOOTED_WORTH - SUPPLIES_USED_WORTH) .. ' GPs (' .. math.abs(math.floor(((ITEMS_LOOTED_WORTH - SUPPLIES_USED_WORTH) * 3600) / ($charactertime / 1000) / 100) / 10) .. ' k/h)', 6, 87 + ROW_QUANTITY * 18 + 20 / 2 - STRING_HEIGHT * 0.5)" enabled="yes" refreshRate="100"/>
            <HUDScript name="YokoStats" script="init start&#10;    --&#10;    --              88                                                                  &#10;    --              &quot;&quot;                                                ,d                &#10;    --                                                                88                &#10;    --   ,adPPYba,  88  8b,dPPYba,  88,dPYba,,adPYba,   ,adPPYYba,  MM88MMM  ,adPPYba,  &#10;    --   I8[    &quot;&quot;  88  88P'   &quot;Y8  88P'   &quot;88&quot;    &quot;8a  &quot;&quot;     `Y8    88    a8P_____88  &#10;    --    `&quot;Y8ba,   88  88          88      88      88  ,adPPPPP88    88    8PP&quot;&quot;&quot;&quot;&quot;&quot;&quot;  &#10;    --   aa    ]8I  88  88          88      88      88  88,    ,88    88,   &quot;8b,   ,aa  &#10;    --   `&quot;YbbdP&quot;'  88  88          88      88      88  `&quot;8bbdP&quot;Y8    &quot;Y888  `&quot;Ybbd8&quot;'  &#10;    --&#10;&#10;    --   Name: Monitor My Stats&#10;    --   Last Updated: 19/12/2013&#10;    --   Version: 1.0&#10;&#10;    local MMS = {&#10;        ShowInfo = true,&#10;&#10;        Title = &quot;Darashia Tomb&quot;,&#10;        Creator = &quot;Yoko&quot;,&#10;        Info = 'Rp Version',&#10;        Version = '1.0.0'&#10;    }&#10;&#10;    -- [[ Do not change anything below this line. ]] --&#10;&#10;    filterinput(false, true, false, false)&#10;&#10;    local HUD_Sections = {&#10;        {Name = 'OTHERS', State = true, Items = {&#10;                {'Ping', function() return $ping .. ' (avg: ' .. $pingaverage .. ')' end},&#10;                {'Bank Balance', function() return num($balance) end},&#10;            }&#10;        },&#10;&#10;        {Name = 'CHARACTER STATS', State = true, Items = {&#10;                {'Level', function() return $level .. ' (' .. 100 - math.floor(($exp - expatlvl($level)) * 100 / (expatlvl($level + 1) - expatlvl($level))) .. '%)' end},&#10;                {'Experience', function() return num($exp) end},&#10;                {'Magic Level', function() return $mlevel .. ' (' .. 100 - $mlevelpc .. '%)' end},&#10;                {'Weapon Skill', function() local _ = WeaponSkill() return _.skill .. ' (' .. 100 - _.skillpc .. '%)' end},&#10;                {'Shielding', function() return $shielding .. ' (' .. 100 - $shieldingpc .. '%)' end},&#10;                {'Fishing', function() return $fishing .. ' (' .. 100 - $fishingpc .. '%)' end}&#10;            }&#10;        },&#10;&#10;        {Name = 'ENGINE STATES', State = true, Items = {&#10;                {'Spell Healer', function() return getsetting('SpellHealer/Enabled') end, function() return toggle('SpellHealer/Enabled') end},&#10;                {'Potion Healer', function() return getsetting('PotionHealer/Enabled') end, function() return toggle('PotionHealer/Enabled') end},&#10;                {'Condition Healer', function() return getsetting('ConditionHealer/Enabled') end, function() return toggle('ConditionHealer/Enabled') end},&#10;                {'Mana Training', function() return getsetting('ManaTrainer/Enabled') end, function() return toggle('ManaTrainer/Enabled') end},&#10;                {'Cavebot', function() return getsetting('Cavebot/Enabled') end, function() return toggle('Cavebot/Enabled') end},&#10;                {'Looting', function() return getsetting('Looting/Enabled') end, function() return toggle('Looting/Enabled') end},&#10;                {'Targeting', function() return getsetting('Targeting/Enabled') end, function() return toggle('Targeting/Enabled') end}&#10;            }&#10;        },&#10;&#10;        {Name = 'BOTTING STATS', State = true, Items = {&#10;                {'Experience per Hour', function() return num($exphour) end},&#10;                {'Experience Left', function() return num(exptolevel()) end},&#10;                {'Experience Today', function() return num($expgained) end},&#10;                {'Time to Next Level', function() return time(timetolevel()) end},&#10;                {'Played Time', function() return time(math.floor($charactertime / 1000)) end},&#10;                {'Stamina', function() return time($stamina) end}&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    local HUD_Colors = {&#10;            Font = color(255, 255, 255, 0),&#10;            SectionHeaderBackground = {0.0, color(36, 68, 105, 20), 0.23, color(39, 73, 114, 20), 0.76, color(21, 39, 60, 20)},EntryNameBackground = {0.0, color(41, 105, 100, 105), 0.76, color(37, 94, 50, 50), 0.23, color(19, 19, 19, 20)},&#10;EntryValueBackground = {0.0, color(19, 19, 19, 20), 0.23, color(37, 94, 50, 50), 0.76, color(41, 105, 100, 105)},&#10;EntryValueEnabledBackground = {0.0, color(65, 96, 12, 20), 0.23, color(67, 99, 13, 20), 0.76, color(36, 52, 6, 20)},&#10;            EntryValueDisabledBackground = {0.0, color(90, 12, 15, 20), 0.23, color(98, 13, 17, 20), 0.76, color(52, 6, 9, 20)},&#10;    }&#10;&#10;    function WeaponSkill()&#10;        local SkillTypes = {&#10;            ['axe'] = {type = 'axe', skill = $axe, skillpc = $axepc},&#10;            ['club'] = {type = 'club', skill = $club, skillpc = $clubpc},&#10;            ['sword'] = {type = 'sword', skill = $sword, skillpc = $swordpc},&#10;            ['bow'] = {type = 'distance', skill = $distance, skillpc = $distancepc},&#10;            ['distance weapon'] = {type = 'distance', skill = $distance, skillpc = $distancepc},&#10;            ['no weapon'] = {type = 'fist', skill = $fist, skillpc = $fistpc},&#10;            ['rod'] = {type = 'magic', skill = $mlevel, skillpc = $mlevelpc},&#10;            ['wand'] = {type = 'magic', skill = $mlevel, skillpc = $mlevelpc},&#10;        }&#10;&#10;        return SkillTypes[findweapontype()]&#10;    end&#10;&#10;    local Moving, Temp, Moved = false, {0, 0}, {0, 0}&#10;&#10;    function inputevents(e)&#10;        if (e.type == IEVENT_LMOUSEDOWN) then&#10;            for _, Section in ipairs(HUD_Sections) do&#10;                if (e.elementid == Section.StateSwitch) then&#10;                    Section.State = not Section.State&#10;                    return&#10;                end&#10;            end&#10;        for _, Section in ipairs(HUD_Sections) do&#10;                if (Section.Name == 'ENGINE STATES') then&#10;                    for _, SectionItem in ipairs(Section.Items) do&#10;                        if (e.elementid == SectionItem[4]) then&#10;                            SectionItem[3]()&#10;                            return&#10;                        end&#10;                    end&#10;                end&#10;            end&#10;        end&#10;&#10;        if (e.type == IEVENT_MMOUSEDOWN) then&#10;            Moving, Temp = true, {$cursor.x - Moved[1], $cursor.y - Moved[2]}&#10;        end&#10;&#10;        if (e.type == IEVENT_MMOUSEUP) then&#10;            Moving = false&#10;        end&#10;    end&#10;    &#10;    setmaskcolorxp(0)&#10;init end&#10;&#10;if (Moving) then&#10;    auto(10)&#10;    Moved = {$cursor.x - Temp[1], $cursor.y - Temp[2]}&#10;end&#10;&#10;setposition($clientwin.left + 5 + Moved[1], $worldwin.top + Moved[2])&#10;setfontstyle('Tahoma', 8, 75, 0xFFFFFF, 1, color(0, 0, 0, 20))&#10;&#10;local YPosition, SectionRow, SectionItemsRow = 0, 0, 0&#10;&#10;if MMS.ShowInfo then&#10;    local StringWidth, StringHeight = measurestring('TEMP')&#10;&#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 22)&#10;    addgradcolors(unpack(HUD_Colors.SectionHeaderBackground))&#10;    drawroundrect(0, 0, 240, 21, 2, 2)&#10;    drawtext(MMS.Title, 6, 21 / 2 - StringHeight * 0.5)&#10;&#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 22)&#10;    addgradcolors(unpack(HUD_Colors.EntryValueBackground))&#10;    drawroundrect(130, 0, 110, 21, 2, 2)&#10;    drawtext(MMS.Creator, 136, 21 / 2 - StringHeight * 0.5)&#10;&#10;    setfontsize(7)&#10;&#10;    local StringWidth, StringHeight = measurestring('TEMP')&#10;&#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;    addgradcolors(unpack(HUD_Colors.EntryNameBackground))&#10;    drawroundrect(0, 24 + 0 * 18, 240, 15, 2, 2)&#10;    drawtext(MMS.Info, 6, 24 + 0 * 18 + 15 / 2 - StringHeight * 0.5 + 1)&#10;     &#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;    addgradcolors(unpack(HUD_Colors.EntryNameBackground))&#10;    drawroundrect(0, 24 + 1 * 18, 240, 15, 2, 2)&#10;    drawtext('Script version:', 6, 24 + 1 * 18 + 15 / 2 - StringHeight * 0.5 + 1)&#10;     &#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 16)&#10;    addgradcolors(unpack(HUD_Colors.EntryValueBackground))&#10;    drawroundrect(130, 24 + 1 * 18, 110, 15, 2, 2)&#10;    drawtext(MMS.Version, 136, 24 + 1 * 18 + 15 / 2 - StringHeight * 0.5 + 1)&#10;    &#10;    YPosition = 22 + 2 * 19&#10;end&#10;&#10;for SectionIndex, Section in ipairs(HUD_Sections) do&#10;    setfontsize(8)&#10;&#10;    local StringWidth, StringHeight = measurestring('TEMP')&#10;&#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;    addgradcolors(unpack(HUD_Colors.SectionHeaderBackground))&#10;    drawroundrect(0, YPosition + (SectionRow * 23) + (SectionItemsRow * 19), 240, 20, 2, 2)&#10;    drawtext(Section.Name, 6, YPosition + (SectionRow * 23) + (SectionItemsRow * 19) + 20 / 2 - StringHeight * 0.5 + 1)&#10;&#10;    setfillstyle('gradient', 'linear', 2, 0, 0, 0, 21)&#10;    if (Section.State) then&#10;        addgradcolors(unpack(HUD_Colors.EntryValueEnabledBackground))&#10;    else&#10;        addgradcolors(unpack(HUD_Colors.EntryValueDisabledBackground))&#10;    end&#10;    Section.StateSwitch = drawroundrect(220, YPosition + (SectionRow * 23) + (SectionItemsRow * 19), 20, 20, 2, 2)&#10;    drawtext('X', 228, YPosition + (SectionRow * 23) + (SectionItemsRow * 19) + 20 / 2 - StringHeight * 0.5 + 1)&#10;&#10;    SectionRow = SectionRow + 1&#10;&#10;    if (Section.State) then&#10;        setfontsize(7)&#10;&#10;        local StringWidth, StringHeight = measurestring('TEMP')&#10;&#10;        for SectionItemIndex, SectionItem in ipairs(Section.Items) do&#10;            setfillstyle('gradient', 'linear', 2, 0, 0, 0, 17)     &#10;            addgradcolors(unpack(HUD_Colors.EntryNameBackground))&#10;            drawroundrect(0, YPosition + (SectionRow * 23) + (SectionItemsRow * 19), 240, 16, 2, 2)&#10;            drawtext(SectionItem[1], 6, YPosition + (SectionRow * 23) + (SectionItemsRow * 19) + 16 / 2 - StringHeight * 0.5 + 1)&#10;&#10;            if (Section.Name == 'ENGINE STATES') then&#10;                local EngineCurrentState = SectionItem[2]()&#10;&#10;                setfillstyle('gradient', 'linear', 2, 0, 0, 0, 17)&#10;                if (EngineCurrentState == 'yes') then&#10;                    addgradcolors(unpack(HUD_Colors.EntryValueEnabledBackground))&#10;                else&#10;                    addgradcolors(unpack(HUD_Colors.EntryValueDisabledBackground))&#10;                end&#10;                HUD_Sections[SectionIndex].Items[SectionItemIndex][4] = drawroundrect(130, YPosition + (SectionRow * 23) + (SectionItemsRow * 19), 110, 16, 2, 2)&#10;&#10;&#10;                drawtext((EngineCurrentState == 'yes' and ('On')) or ('Off'), 136, YPosition + (SectionRow * 23) + (SectionItemsRow * 19) + 16 / 2 - StringHeight * 0.5 + 1)&#10;            else&#10;                setfillstyle('gradient', 'linear', 2, 0, 0, 0, 17)&#10;                addgradcolors(unpack(HUD_Colors.EntryValueBackground))&#10;                drawroundrect(130, YPosition + (SectionRow * 23) + (SectionItemsRow * 19), 110, 16, 2, 2)&#10;                drawtext(SectionItem[2](), 136, YPosition + (SectionRow * 23) + (SectionItemsRow * 19) + 16 / 2 - StringHeight * 0.5 + 1)&#10;            end&#10;&#10;            SectionItemsRow = SectionItemsRow + 1&#10;        end&#10;    end&#10;end" enabled="yes" refreshRate="100"/>
            <HUDScript name="ShowWaypoints" script="init start&#10;&#9;-- local SCRIPT_VERSION = '1.2.1'&#10;&#10;&#9;local waypointColors = {&#10;&#9;&#9;walk    = 0xAAF200,&#10;&#9;&#9;node    = 0x2A0736,&#10;&#9;&#9;stand   = 0x00AACC,&#10;&#9;&#9;shovel  = 0xEB8540,&#10;&#9;&#9;rope    = 0xFFCC00,&#10;&#9;&#9;machete = 0x003366,&#10;&#9;&#9;ladder  = 0xC55186,&#10;&#9;&#9;use     = 0x36693E,&#10;&#9;&#9;action  = 0x00FFFF,&#10;&#9;&#9;lure    = 0xCCCCCC&#10;&#9;}&#10;&#10;&#9;local function deleteWaypointCall(menu)&#10;&#9;&#9;removewaypoint(menu.waypointID)&#10;&#9;end&#10;&#10;&#9;local function moveWaypointName()&#10;&#9;&#9;if resizedWpt == nil then&#10;&#9;&#9;&#9;return tern(draggedWpt == nil, 'Move Waypoint', 'Stop Moving')&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;local function moveWaypointCall(menu)&#10;&#9;&#9;if draggedWpt == nil then&#10;&#9;&#9;&#9;draggedWpt = menu.waypoint&#10;&#9;&#9;else&#10;&#9;&#9;&#9;draggedWpt = nil&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;local function resizeWaypointName()&#10;&#9;&#9;if draggedWpt == nil then&#10;&#9;&#9;&#9;return tern(resizedWpt == nil, 'Resize Waypoint', 'Stop Resizing')&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;local function resizeWaypointCall(menu)&#10;&#9;&#9;if resizedWpt == nil then&#10;&#9;&#9;&#9;resizedWpt = menu.waypoint&#10;&#9;&#9;else&#10;&#9;&#9;&#9;resizedWpt = nil&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;registermessagehandler('contextMenu_waypoint', moveWaypointName, moveWaypointCall)&#10;&#9;registermessagehandler('contextMenu_waypoint', resizeWaypointName, resizeWaypointCall)&#10;&#9;registermessagehandler('contextMenu_waypoint', 'Delete Waypoint', deleteWaypointCall)&#10;&#9;registermessagehandler('contextMenu_waypoint', MENU_SEPARATOR, nil)&#10;&#10;&#9;local xOffset, yOffset, worldWidth, worldHeight, x, y, z, topLeftTilePos,&#10;&#9;      botRightTilePos, width, height, text, label&#10;&#9;local waypointRect = {}&#10;&#10;&#9;function gettilepos(x, y, z)&#10;&#9;&#9;local tile = getobjectarea(x, y, z)&#10;&#10;&#9;&#9;if tile == nil then&#10;&#9;&#9;&#9;local xDiff, yDiff = x - $posx, y - $posy&#10;&#9;&#9;&#9;if math.abs($posx - x) &lt;= 7 then&#10;&#9;&#9;&#9;&#9;tile = getobjectarea(x, $posy, $posz)&#10;&#9;&#9;&#9;&#9;xDiff = 0&#10;&#9;&#9;&#9;elseif math.abs($posy - y) &lt;= 5 then&#10;&#9;&#9;&#9;&#9;tile = getobjectarea($posx, y, $posz)&#10;&#9;&#9;&#9;&#9;yDiff = 0&#10;&#9;&#9;&#9;else&#10;&#9;&#9;&#9;&#9;tile = getobjectarea($posx, $posy, $posz)&#10;&#9;&#9;&#9;end&#10;&#10;&#9;&#9;&#9;-- Some strange stuff happens when you go from 0 to -1, so I'm&#10;&#9;&#9;&#9;-- adding this as a precaution.&#10;&#9;&#9;&#9;if tile ~= nil then&#10;&#9;&#9;&#9;&#9;local width, height = $worldwin.width, $worldwin.height&#10;&#10;&#9;&#9;&#9;&#9;tile.left    = tile.left    + (width * xDiff)&#10;&#9;&#9;&#9;&#9;tile.right   = tile.right   + (width * xDiff)&#10;&#9;&#9;&#9;&#9;tile.centerx = tile.centerx + (width * xDiff)&#10;&#9;&#9;&#9;&#9;tile.top     = tile.top     + (height * yDiff)&#10;&#9;&#9;&#9;&#9;tile.bottom  = tile.bottom  + (height * yDiff)&#10;&#9;&#9;&#9;&#9;tile.centery = tile.centery + (height * yDiff)&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#10;&#9;&#9;return tile&#10;&#9;end&#10;&#10;&#9;useworldhud()&#10;init end&#10;&#10;setfontstyle('Tahoma', 7, 75, 0xFFFFFF, 1, 0x000000)&#10;&#10;xOffset, yOffset = $worldwin.left - $clientwin.left, $worldwin.top - $clientwin.top&#10;worldWidth, worldHeight = $worldwin.right - $worldwin.left - 2, $worldwin.bottom - $worldwin.top - 2&#10;&#10;local i = 0&#10;foreach settingsentry e 'Cavebot/Waypoints' do&#10;&#9;x, y, z = getsetting(e, 'Coordinates'):match(REGEX_SPA_COORDS)&#10;&#9;x, y, z = tonumber(x), tonumber(y), tonumber(z)&#10;&#10;&#9;if z == $posz then&#10;&#9;&#9;width, height = getsetting(e, 'Range'):match(REGEX_SPA_SIZE)&#10;&#9;&#9;width, height = tonumber(width), tonumber(height)&#10;&#10;&#9;&#9;topLeftTilePos = gettilepos(x, y, z)&#10;&#9;&#9;botRightTilePos = gettilepos(x + width - 1, y + height - 1, z)&#10;&#10;&#9;&#9;if topLeftTilePos and botRightTilePos then&#10;&#9;&#9;&#9;waypointRect.left   = math.max(topLeftTilePos.left  , 0)&#10;&#9;&#9;&#9;waypointRect.top    = math.max(topLeftTilePos.top   , 0)&#10;&#9;&#9;&#9;waypointRect.right  = math.min(botRightTilePos.right , worldWidth)&#10;&#9;&#9;&#9;waypointRect.bottom = math.min(botRightTilePos.bottom, worldHeight)&#10;&#9;&#9;&#9;waypointRect.width  = waypointRect.right - waypointRect.left&#10;&#9;&#9;&#9;waypointRect.height = waypointRect.bottom - waypointRect.top&#10;&#10;&#9;&#9;&#9;if waypointRect.width &gt; 0 and waypointRect.height &gt; 0 then&#10;&#9;&#9;&#9;&#9;label = getsetting(e, 'Label')&#10;&#9;&#9;&#9;&#9;text = tern(#label == 0, tostring(i), label .. ' (' .. i .. ')')&#10;&#9;&#9;&#9;&#9;wptType = getsetting(e, 'Type')&#10;&#10;&#9;&#9;&#9;&#9;setfillstyle('color', (waypointColors[wptType:lower()] or 0) + (math.floor(2.55*50)*16777216))&#10;&#9;&#9;&#9;&#9;drawroundrect(&#10;&#9;&#9;&#9;&#9;&#9;waypointRect.left,&#10;&#9;&#9;&#9;&#9;&#9;waypointRect.top,&#10;&#9;&#9;&#9;&#9;&#9;waypointRect.width,&#10;&#9;&#9;&#9;&#9;&#9;waypointRect.height,&#10;&#9;&#9;&#9;&#9;&#9;10, 10&#10;&#9;&#9;&#9;&#9;)&#10;&#10;&#9;&#9;&#9;&#9;if waypointRect.width &gt; 10 then&#10;&#9;&#9;&#9;&#9;&#9;drawtext(&#10;&#9;&#9;&#9;&#9;&#9;&#9;string.fit(text, waypointRect.width - 10, '...', true),&#10;&#9;&#9;&#9;&#9;&#9;&#9;waypointRect.left + 5,&#10;&#9;&#9;&#9;&#9;&#9;&#9;waypointRect.top + 3&#10;&#9;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;&#9;drawtext(&#10;&#9;&#9;&#9;&#9;&#9;&#9;string.fit(wptType, waypointRect.width - 10, '...', true),&#10;&#9;&#9;&#9;&#9;&#9;&#9;waypointRect.left + 5,&#10;&#9;&#9;&#9;&#9;&#9;&#9;waypointRect.top + 15&#10;&#9;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;&#9;&#9;end&#10;&#9;&#9;&#9;end&#10;&#9;&#9;end&#10;&#9;end&#10;&#10;&#9;i = i + 1&#10;end&#10;&#10;if contextmenuinfo() == nil then&#10;&#9;if draggedWpt then&#10;&#9;&#9;set(draggedWpt, 'Coordinates', string.format('x:%i, y:%i, z:%i', $cursorinfo.x, $cursorinfo.y, $cursorinfo.z))&#10;&#9;elseif resizedWpt then&#10;&#9;&#9;local x, y = get(resizedWpt, 'Coordinates'):match(REGEX_COORDS)&#10;&#9;&#9;x, y = tonumber(x), tonumber(y)&#10;&#10;&#9;&#9;set(resizedWpt, 'Range', string.format('%i x %i', math.max(1, 1 + ($cursorinfo.x - x)) , math.max(1, 1 + ($cursorinfo.y - y))))&#10;&#9;end&#10;end" enabled="no" refreshRate="100"/>
            <HUDScript name="ShowSpecialAreas" script="init start&#13;&#10;&#9;-- local SCRIPT_VERSION = '1.2.1'&#13;&#10;&#13;&#10;&#9;local function deleteSpecialAreaCall(menu)&#13;&#10;&#9;&#9;removespecialarea(menu.specialAreaName)&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function moveSpecialAreaName()&#13;&#10;&#9;&#9;if resizedSP == nil then&#13;&#10;&#9;&#9;&#9;return tern(draggedSP == nil, 'Move Special Area', 'Stop Moving')&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function moveSpecialAreaCall(menu)&#13;&#10;&#9;&#9;if draggedSP == nil then&#13;&#10;&#9;&#9;&#9;draggedSP = menu.specialArea&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;draggedSP = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function resizeSpecialAreaName()&#13;&#10;&#9;&#9;if draggedSP == nil then&#13;&#10;&#9;&#9;&#9;return tern(resizedSP == nil, 'Resize Special Area', 'Stop Resizing')&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function resizeSpecialAreaCall(menu)&#13;&#10;&#9;&#9;if resizedSP == nil then&#13;&#10;&#9;&#9;&#9;resizedSP = menu.specialArea&#13;&#10;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;resizedSP = nil&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;registermessagehandler('contextMenu_specialArea', moveSpecialAreaName, moveSpecialAreaCall)&#13;&#10;&#9;registermessagehandler('contextMenu_specialArea', resizeSpecialAreaName, resizeSpecialAreaCall)&#13;&#10;&#9;registermessagehandler('contextMenu_specialArea', 'Delete Special Area', deleteSpecialAreaCall)&#13;&#10;&#9;registermessagehandler('contextMenu_specialArea', MENU_SEPARATOR, nil)&#13;&#10;&#13;&#10;&#9;local worldWidth, worldHeight, x, y, z, width, height, avoidance, name, policy, areaType&#13;&#10;&#9;local specialAreaRect = {}&#13;&#10;&#9;local innerRect = {}&#13;&#10;&#13;&#10;&#9;local function gettilepos(x, y, z)&#13;&#10;&#9;&#9;local tile = getobjectarea(x, y, z)&#13;&#10;&#13;&#10;&#9;&#9;if tile == nil then&#13;&#10;&#9;&#9;&#9;local xDiff, yDiff = x - $posx, y - $posy&#13;&#10;&#9;&#9;&#9;if math.abs($posx - x) &lt;= 7 then&#13;&#10;&#9;&#9;&#9;&#9;tile = getobjectarea(x, $posy, $posz)&#13;&#10;&#9;&#9;&#9;&#9;xDiff = 0&#13;&#10;&#9;&#9;&#9;elseif math.abs($posy - y) &lt;= 5 then&#13;&#10;&#9;&#9;&#9;&#9;tile = getobjectarea($posx, y, $posz)&#13;&#10;&#9;&#9;&#9;&#9;yDiff = 0&#13;&#10;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;tile = getobjectarea($posx, $posy, $posz)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Some strange stuff happens when you go from 0 to -1, so I'm&#13;&#10;&#9;&#9;&#9;-- adding this as a precaution.&#13;&#10;&#9;&#9;&#9;if tile ~= nil then&#13;&#10;&#9;&#9;&#9;&#9;local width, height = $worldwin.width, $worldwin.height&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;tile.left    = tile.left    + (width * xDiff)&#13;&#10;&#9;&#9;&#9;&#9;tile.right   = tile.right   + (width * xDiff)&#13;&#10;&#9;&#9;&#9;&#9;tile.centerx = tile.centerx + (width * xDiff)&#13;&#10;&#9;&#9;&#9;&#9;tile.top     = tile.top     + (height * yDiff)&#13;&#10;&#9;&#9;&#9;&#9;tile.bottom  = tile.bottom  + (height * yDiff)&#13;&#10;&#9;&#9;&#9;&#9;tile.centery = tile.centery + (height * yDiff)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return tile&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function getAreaRect(x, y, w, h)&#13;&#10;&#9;&#9;local ret = {x = 0, y = 0, w = 0, h = 0}&#13;&#10;&#13;&#10;&#9;&#9;local topLeftTilePos = gettilepos(x, y, $posz)&#13;&#10;&#9;&#9;local botRightTilePos = gettilepos(x + w - 1, y + h - 1, $posz)&#13;&#10;&#13;&#10;&#9;&#9;if topLeftTilePos and botRightTilePos then&#13;&#10;&#9;&#9;&#9;ret.x = math.max(topLeftTilePos.left, 0)&#13;&#10;&#9;&#9;&#9;ret.y = math.max(topLeftTilePos.top, 0)&#13;&#10;&#9;&#9;&#9;ret.w = math.min(botRightTilePos.right, worldWidth) - ret.x&#13;&#10;&#9;&#9;&#9;ret.h = math.min(botRightTilePos.bottom, worldHeight) - ret.y&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;return ret&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function drawInnerRect(areaType, x, y, width, height)&#13;&#10;&#9;&#9;innerRect = {w = 0, h = 0}&#13;&#10;&#9;&#9;if areaType == 'Square (Border Only)' then&#13;&#10;&#9;&#9;&#9;innerRect = getAreaRect(x + 1, y + 1, width - 2, height - 2)&#13;&#10;&#9;&#9;elseif areaType == 'Square (Double Border)' then&#13;&#10;&#9;&#9;&#9;innerRect = getAreaRect(x + 2, y + 2, width - 4, height - 4)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if innerRect.w &gt; 0 and innerRect.h &gt; 0 then&#13;&#10;&#9;&#9;&#9;setfillstyle('color', 0xFF000000)&#13;&#10;&#9;&#9;&#9;drawroundrect(innerRect.x, innerRect.y, innerRect.w, innerRect.h, 10, 10)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;useworldhud()&#13;&#10;init end&#13;&#10;&#13;&#10;setfontstyle('Arial', 8, 75, 0xFFFFFF, 1, 0x000000)&#13;&#10;&#13;&#10;worldWidth, worldHeight = $worldwin.width - 2, $worldwin.height - 2&#13;&#10;&#13;&#10;foreach settingsentry e 'Cavebot/SpecialAreas' do&#13;&#10;&#9;x, y, z = getsetting(e, 'Coordinates'):match('.-(%d+).-(%d+).-(%d+)')&#13;&#10;&#9;x, y, z = tonumber(x), tonumber(y), tonumber(z)&#13;&#10;&#13;&#10;&#9;if z == $posz then&#13;&#10;&#9;&#9;width, height = getsetting(e, 'Size'):match('(%d+).-(%d+)')&#13;&#10;&#9;&#9;width, height = tonumber(width), tonumber(height)&#13;&#10;&#13;&#10;&#9;&#9;specialAreaRect = getAreaRect(x, y, width, height)&#13;&#10;&#9;&#9;if specialAreaRect.w &gt; 0 and specialAreaRect.h &gt; 0 then&#13;&#10;&#9;&#9;&#9;avoidance = tonumber(getsetting(e, 'Avoidance'))&#13;&#10;&#9;&#9;&#9;areaType = getsetting(e, 'Type')&#13;&#10;&#9;&#9;&#9;name = getsetting(e, 'Name')&#13;&#10;&#9;&#9;&#9;policy = getsetting(e, 'Policy'):gsub('[^A-Z]', '')&#13;&#10;&#13;&#10;&#9;&#9;&#9;setfillstyle('color', color(255, 0, 0, math.round(100 - (avoidance / 4))))&#13;&#10;&#9;&#9;&#9;drawroundrect(specialAreaRect.x, specialAreaRect.y, specialAreaRect.w, specialAreaRect.h, 10, 10)&#13;&#10;&#9;&#9;&#9;drawInnerRect(areaType, x, y, width, height)&#13;&#10;&#13;&#10;&#9;&#9;&#9;if specialAreaRect.w &gt; 10 then&#13;&#10;&#9;&#9;&#9;&#9;drawtext(&#13;&#10;&#9;&#9;&#9;&#9;&#9;string.fit(name, specialAreaRect.w - 10, '...', true),&#13;&#10;&#9;&#9;&#9;&#9;&#9;specialAreaRect.x + 5,&#13;&#10;&#9;&#9;&#9;&#9;&#9;specialAreaRect.y + 3&#13;&#10;&#9;&#9;&#9;&#9;)&#13;&#10;&#9;&#9;&#9;&#9;drawtext(&#13;&#10;&#9;&#9;&#9;&#9;&#9;string.fit(policy, specialAreaRect.w - 10, '...', true),&#13;&#10;&#9;&#9;&#9;&#9;&#9;specialAreaRect.x + 5,&#13;&#10;&#9;&#9;&#9;&#9;&#9;specialAreaRect.y + 15&#13;&#10;&#9;&#9;&#9;&#9;)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;if contextmenuinfo() == nil then&#13;&#10;&#9;if draggedSP then&#13;&#10;&#9;&#9;set(draggedSP, 'Coordinates', string.format('x:%i, y:%i, z:%i', $cursorinfo.x, $cursorinfo.y, $cursorinfo.z))&#13;&#10;&#9;elseif resizedSP then&#13;&#10;&#9;&#9;local x, y = get(resizedSP, 'Coordinates'):match(REGEX_COORDS)&#13;&#10;&#9;&#9;x, y = tonumber(x), tonumber(y)&#13;&#10;&#13;&#10;&#9;&#9;set(resizedSP, 'Size', string.format('%i x %i', math.max(1, 1 + ($cursorinfo.x - x)) , math.max(1, 1 + ($cursorinfo.y - y))))&#13;&#10;&#9;end&#13;&#10;end" enabled="no" refreshRate="100"/>
            <HUDScript name="ContextMenu" script="init start&#13;&#10;&#9;-- local SCRIPT_VERSION = '2.2.0'&#13;&#10;&#13;&#10;&#9;local showProfile = true&#13;&#10;&#9;local showRelation = true&#13;&#10;&#9;local showWaypoints = true&#13;&#10;&#9;local mainWaypoints = {'Node', 'Stand', 'Action', 'Lure'}&#13;&#10;&#9;local secondaryWaypoints = {'Walk', 'Shovel', 'Rope', 'Machete', 'Ladder', 'Use'}&#13;&#10;&#9;local showSpecialAreas = true&#13;&#10;&#9;local specialAreas = {'none', 'cavebot', 'targeting', 'cavebot &amp; targeting'}&#13;&#10;&#13;&#10;&#9;-- DO NOT EDIT BELOW THIS LINE --&#13;&#10;&#13;&#10;&#9;local defFontColor        = color(223, 223, 223)&#13;&#10;&#9;local defBackColor        = color(70, 70, 70)&#13;&#10;&#9;local defHighColor        = color(128, 128, 128)&#13;&#10;&#9;local boxColor            = color(70, 70, 70)&#13;&#10;&#9;local boxLightShadowColor = color(117, 117, 117)&#13;&#10;&#9;local boxDarkShadowColor  = color(41, 41, 41)&#13;&#10;&#13;&#10;&#9;local borderSize = 4&#13;&#10;&#9;local paddingSize = 3&#13;&#10;&#13;&#10;&#9;local PROFILE_URL = &quot;http://www.tibia.com/community/?subtopic=characters&amp;name=&quot;&#13;&#10;&#13;&#10;&#9;ALIGN_LEFT   = 0&#13;&#10;&#9;ALIGN_CENTER = 1&#13;&#10;&#9;ALIGN_RIGHT  = 2&#13;&#10;&#13;&#10;&#9;MENU_SEPARATOR = '-- SEPARATOR --'&#13;&#10;&#13;&#10;&#9;local items, highlight, contextMenu, maxWidth, maxHeight, clicked&#13;&#10;&#13;&#10;&#9;do -- Register default handlers&#13;&#10;&#9;&#9;if showProfile then&#13;&#10;&#9;&#9;&#9;local function showProfileName(m)&#13;&#10;&#9;&#9;&#9;&#9;return 'Show page for ' .. m.creature.name&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local function showProfileCall(m)&#13;&#10;&#9;&#9;&#9;&#9;openbrowser(PROFILE_URL .. m.creature.name:gsub(' ', '+'))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', showProfileName, showProfileCall)&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', MENU_SEPARATOR, nil)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if showRelation then&#13;&#10;&#9;&#9;&#9;local function currentRelationName(m)&#13;&#10;&#9;&#9;&#9;&#9;if m.creature.id ~= $self.id then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return m.creature.name .. ': ' .. m.creature.teamname, m.creature.teamcolor, nil, color(70, 70, 70)&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', currentRelationName, nil)&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', MENU_SEPARATOR, nil)&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- enemy&#13;&#10;&#9;&#9;&#9;local function setEnemyName(m)&#13;&#10;&#9;&#9;&#9;&#9;if m.creature.id ~= $self.id and not m.creature.isenemy then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return 'Set ' .. m.creature.name .. ' as enemy'&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local function setEnemyCall(m)&#13;&#10;&#9;&#9;&#9;&#9;setrelation(m.creature, 'enemy')&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', setEnemyName, setEnemyCall)&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- ally&#13;&#10;&#9;&#9;&#9;local function setAllyName(m)&#13;&#10;&#9;&#9;&#9;&#9;if m.creature.id ~= $self.id and (not m.creature.isally or m.creature.isleader) then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return 'Set ' .. m.creature.name .. ' as ally'&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local function setAllyCall(m)&#13;&#10;&#9;&#9;&#9;&#9;setrelation(m.creature, 'ally')&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', setAllyName, setAllyCall)&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- leader&#13;&#10;&#9;&#9;&#9;local function setLeaderName(m)&#13;&#10;&#9;&#9;&#9;&#9;if m.creature.id ~= $self.id and not m.creature.isleader then&#13;&#10;&#9;&#9;&#9;&#9;&#9;return 'Set ' .. m.creature.name .. ' as leader'&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;local function setLeaderCall(m)&#13;&#10;&#9;&#9;&#9;&#9;setrelation(m.creature, 'leader')&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', setLeaderName, setLeaderCall)&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_player', MENU_SEPARATOR, nil)&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if showWaypoints then&#13;&#10;&#9;&#9;&#9;for _, v in ipairs({mainWaypoints, secondaryWaypoints}) do&#13;&#10;&#9;&#9;&#9;&#9;for _, vv in ipairs(v) do&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- I learned this trick with JavaScript; basically, we call a anonymous&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- function that returns the function we'll actually use. The trick is&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- that we pass to this first anonymous function the type of the node&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- we want the returned function to add. This works because the inner&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- function is created in a scope where `type` has the desired value,&#13;&#10;&#9;&#9;&#9;&#9;&#9;-- so it's value is retained for future calls.&#13;&#10;&#9;&#9;&#9;&#9;&#9;registermessagehandler('contextMenu_world', 'Add ' .. vv, (function(type)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;return function(m)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;addwaypoint(type, m.posx, m.posy, m.posz)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end)(vv))&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;registermessagehandler('contextMenu_world', MENU_SEPARATOR, nil)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if showSpecialAreas then&#13;&#10;&#9;&#9;&#9;for _, v in ipairs(specialAreas) do&#13;&#10;&#9;&#9;&#9;&#9;registermessagehandler('contextMenu_world', 'Add Special Area (' .. v:capitalizeall() .. ')', (function(type)&#13;&#10;&#9;&#9;&#9;&#9;&#9;return function(m)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;addspecialarea(type, m.posx, m.posy, m.posz)&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end)(v))&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;registermessagehandler('contextMenu_world', MENU_SEPARATOR, nil)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;local function loadCategories(...)&#13;&#10;&#9;&#9;local categories = {...}&#13;&#10;&#13;&#10;&#9;&#9;for _, v in ipairs(categories) do&#13;&#10;&#9;&#9;&#9;local cat = 'contextMenu_' .. v&#13;&#10;&#9;&#9;&#9;foreach messagehandler m cat do&#13;&#10;&#9;&#9;&#9;&#9;local text, fontColor, backColor, highColor, align&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if type(m.name) == 'function' then&#13;&#10;&#9;&#9;&#9;&#9;&#9;text, fontColor, highColor, backColor, align = m.name(contextMenu)&#13;&#10;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;text = m.name&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if text and text ~= '' then&#13;&#10;&#9;&#9;&#9;&#9;&#9;local width&#13;&#10;&#9;&#9;&#9;&#9;&#9;if text == MENU_SEPARATOR then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;maxHeight = maxHeight + 8&#13;&#10;&#9;&#9;&#9;&#9;&#9;else&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;width = (measurestring(text))&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;maxHeight = maxHeight + 19&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;maxWidth = math.max(maxWidth, width)&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;table.insert(items, {&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;text      = text,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;width     = width,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;callback  = m.callback,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;fontColor = fontColor or defFontColor,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;highColor = highColor or defHighColor,&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;backColor = backColor or defBackColor&#13;&#10;&#9;&#9;&#9;&#9;&#9;});&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;filterinput(false, true, true, false)&#13;&#10;&#9;function inputevents(e)&#13;&#10;&#9;&#9;local eventItem, itemIndex&#13;&#10;&#9;&#9;for i, v in ipairs(items) do&#13;&#10;&#9;&#9;&#9;if v.id == e.elementid then&#13;&#10;&#9;&#9;&#9;&#9;eventItem = v&#13;&#10;&#9;&#9;&#9;&#9;itemIndex = i&#13;&#10;&#9;&#9;&#9;&#9;break&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#13;&#10;&#9;&#9;highlight = itemIndex&#13;&#10;&#9;&#9;if e.type == IEVENT_LMOUSEUP then&#13;&#10;&#9;&#9;&#9;if eventItem and eventItem.callback then&#13;&#10;&#9;&#9;&#9;&#9;eventItem.callback(contextMenu)&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;clicked = true&#13;&#10;&#9;&#9;&#9;highlight = nil&#13;&#10;&#9;&#9;&#9;waitforevents(false)&#13;&#10;&#9;&#9;&#9;press('[ESC]')&#13;&#10;&#9;&#9;&#9;waitforevents(true)&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;setfontstyle('Tahoma', 7, 75, defFontColor, 1, 0x000000)&#13;&#10;&#9;setantialiasing(true)&#13;&#10;init end&#13;&#10;&#13;&#10;auto(10)&#13;&#10;&#13;&#10;contextMenu = contextmenuinfo()&#13;&#10;&#13;&#10;-- This prevents the HUD from redrawing after clicking&#13;&#10;if clicked then&#13;&#10;&#9;clicked = contextMenu ~= nil&#13;&#10;&#9;contextMenu = nil&#13;&#10;end&#13;&#10;&#13;&#10;if contextMenu == nil then&#13;&#10;&#9;highlight = nil&#13;&#10;&#9;return&#13;&#10;end&#13;&#10;&#13;&#10;items = {}&#13;&#10;maxWidth, maxHeight = 0, -4&#13;&#10;local fullWidth, fullHeight&#13;&#10;do -- Bootstrap&#13;&#10;&#13;&#10;&#9;-- Load categories&#13;&#10;&#9;if contextMenu.type == 'battle' or contextMenu.itemid == 99 then&#13;&#10;&#9;&#9;contextMenu.creature = getcreaturebyid(contextMenu.creatureid)&#13;&#10;&#13;&#10;&#9;&#9;if contextMenu.creature.isplayer then&#13;&#10;&#9;&#9;&#9;loadCategories(contextMenu.type .. 'Player', 'player')&#13;&#10;&#9;&#9;elseif contextMenu.creature.isnpc then&#13;&#10;&#9;&#9;&#9;loadCategories(contextMenu.type .. 'NPC', 'NPC')&#13;&#10;&#9;&#9;elseif contextMenu.creature.ismonster then&#13;&#10;&#9;&#9;&#9;loadCategories(contextMenu.type .. 'Monster', 'monster')&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;loadCategories(contextMenu.type .. 'Creature', 'creature')&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if contextMenu.type == 'world' then&#13;&#10;&#9;&#9;if not contextMenu.creature then&#13;&#10;&#9;&#9;&#9;loadCategories('worldItem', 'item')&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;if contextMenu.posz == $posz then&#13;&#10;&#13;&#10;&#9;&#9;&#9;do&#13;&#10;&#9;&#9;&#9;&#9;local i = 0&#13;&#10;&#9;&#9;&#9;&#9;foreach settingsentry e 'Cavebot/Waypoints' do&#13;&#10;&#9;&#9;&#9;&#9;&#9;local x, y, z = get(e, 'Coordinates'):match(REGEX_COORDS)&#13;&#10;&#9;&#9;&#9;&#9;&#9;x, y, z = tonumber(x), tonumber(y), tonumber(z)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;if z == $posz then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;local diffX, diffY = contextMenu.posx - x, contextMenu.posy - y&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if diffX &gt;= 0 and diffY &gt;= 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local w, h = get(e, 'Range'):match(REGEX_RANGE)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;w, h = tonumber(w), tonumber(h)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if diffX &lt; w and diffY &lt; h then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;contextMenu.waypoint = e&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;contextMenu.waypointID = i&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;i = i + 1&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if contextMenu.waypoint then&#13;&#10;&#9;&#9;&#9;&#9;&#9;loadCategories('worldWaypoint', 'waypoint')&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;do&#13;&#10;&#9;&#9;&#9;&#9;foreach settingsentry e 'Cavebot/SpecialAreas' do&#13;&#10;&#9;&#9;&#9;&#9;&#9;local x, y, z = get(e, 'Coordinates'):match(REGEX_COORDS)&#13;&#10;&#9;&#9;&#9;&#9;&#9;x, y, z = tonumber(x), tonumber(y), tonumber(z)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;if z == $posz then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;local diffX, diffY = contextMenu.posx - x, contextMenu.posy - y&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;if diffX &gt;= 0 and diffY &gt;= 0 then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local w, h = get(e, 'Size'):match(REGEX_RANGE)&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;w, h = tonumber(w), tonumber(h)&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if diffX &lt; w and diffY &lt; h then&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;contextMenu.specialArea = e&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;contextMenu.specialAreaName = get(e, 'Name')&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;if contextMenu.specialArea then&#13;&#10;&#9;&#9;&#9;&#9;&#9;loadCategories('worldSpecialArea', 'specialArea')&#13;&#10;&#9;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;elseif contextMenu.type == 'container' then&#13;&#10;&#9;&#9;loadCategories('containerItem', 'item')&#13;&#10;&#9;elseif contextMenu.type == 'equip' then&#13;&#10;&#9;&#9;loadCategories('equipItem', 'item')&#13;&#10;&#9;end&#13;&#10;&#9;loadCategories(contextMenu.type)&#13;&#10;&#13;&#10;&#9;-- We set it as true from the beginning so that it also removes the first&#13;&#10;&#9;-- item if it's a separator; we obviously don't want the first item to be a&#13;&#10;&#9;-- separator. NOTE: relies on the fact that ipairs() will traverse the&#13;&#10;&#9;-- table in ascending order, which isn't guaranteed by the reference manual&#13;&#10;&#9;-- but is the common implementation&#13;&#10;&#9;local lastSep = true&#13;&#10;&#13;&#10;&#9;-- Instead of removing the items at the for loop, we simply set it to nil&#13;&#10;&#9;-- and normalize it after; this is because if we did remove it, it would&#13;&#10;&#9;-- shift the indexes and end up fucking up posterior checks&#13;&#10;&#9;for i, v in ipairs(items) do&#13;&#10;&#9;&#9;local curSep = v.text == MENU_SEPARATOR&#13;&#10;&#9;&#9;if curSep and (lastSep or i == #items) then&#13;&#10;&#9;&#9;&#9;items[i] = nil&#13;&#10;&#9;&#9;&#9;maxHeight = maxHeight - 8&#13;&#10;&#9;&#9;end&#13;&#10;&#13;&#10;&#9;&#9;lastSep = curSep&#13;&#10;&#9;end&#13;&#10;&#9;table.normalize(items)&#13;&#10;&#13;&#10;&#9;-- No item to display, abort mission!&#13;&#10;&#9;if #items == 0 then&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;-- The Tibia context menu has an extra width of 44 pixels for the longest&#13;&#10;&#9;-- item; here we account for that&#13;&#10;&#9;maxWidth = maxWidth + 44&#13;&#10;&#13;&#10;&#9;fullWidth, fullHeight = maxWidth + 2*borderSize, maxHeight + 2*borderSize&#13;&#10;&#9;setposition($clientwin.x + contextMenu.x - fullWidth - 2,$clientwin.y + contextMenu.y)&#13;&#10;end&#13;&#10;&#13;&#10;do -- Draw Container&#13;&#10;&#9;-- Draw main box&#13;&#10;&#9;setfillstyle('color', boxColor)&#13;&#10;&#9;setbordercolor(-1)&#13;&#10;&#9;drawrect(0, 0, fullWidth, fullHeight)&#13;&#10;&#13;&#10;&#9;-- Draw shadows&#13;&#10;&#9;setbordercolor(boxLightShadowColor)&#13;&#10;&#9;drawline(0, 0, fullWidth, 0)&#13;&#10;&#9;drawline(0, 0, 0, fullHeight)&#13;&#10;&#9;drawline(2, fullHeight - 2, fullWidth - borderSize, 0)&#13;&#10;&#9;drawline(fullWidth - 2, 2, 0, fullHeight - borderSize)&#13;&#10;&#13;&#10;&#9;setbordercolor(boxDarkShadowColor)&#13;&#10;&#9;drawline(2, 2, fullWidth - borderSize, 0)&#13;&#10;&#9;drawline(2, 2, 0, fullHeight - borderSize)&#13;&#10;&#9;drawline(0, fullHeight, fullWidth, 0)&#13;&#10;&#9;drawline(fullWidth, 0, 0, fullHeight)&#13;&#10;end&#13;&#10;&#13;&#10;do -- Draw items&#13;&#10;&#9;local curHeight = borderSize&#13;&#10;&#9;for i, v in ipairs(items) do&#13;&#10;&#9;&#9;-- Separators get special treatment here&#13;&#10;&#9;&#9;if v.text == MENU_SEPARATOR then&#13;&#10;&#9;&#9;&#9;setbordercolor(boxDarkShadowColor)&#13;&#10;&#9;&#9;&#9;drawline(borderSize, curHeight, maxWidth, 0)&#13;&#10;&#13;&#10;&#9;&#9;&#9;setbordercolor(boxLightShadowColor)&#13;&#10;&#9;&#9;&#9;drawline(borderSize, curHeight + 1, maxWidth, 0)&#13;&#10;&#13;&#10;&#9;&#9;&#9;curHeight = curHeight + 8&#13;&#10;&#9;&#9;else&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- This is a dirty, dirrty attempt of making the code shorter; and&#13;&#10;&#9;&#9;&#9;-- that's what I love the most about programming&#13;&#10;&#9;&#9;&#9;local alignOffset = ((maxWidth - paddingSize - v.width) / 2) * (v.align or ALIGN_LEFT)&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Set style&#13;&#10;&#9;&#9;&#9;setbordercolor(-1)&#13;&#10;&#9;&#9;&#9;setfontcolor(v.fontColor)&#13;&#10;&#9;&#9;&#9;setfillstyle('color', tern(i == highlight, v.highColor, v.backColor))&#13;&#10;&#13;&#10;&#9;&#9;&#9;-- Draw stuff&#13;&#10;&#9;&#9;&#9;v.id = drawrect(borderSize, curHeight, maxWidth, 15)&#13;&#10;&#9;&#9;&#9;drawtext(v.text, borderSize + paddingSize + alignOffset, curHeight + paddingSize)&#13;&#10;&#13;&#10;&#9;&#9;&#9;curHeight = curHeight + 19&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;end" enabled="no" refreshRate="100"/>
        </HUDScripts>
    </HUDs>
    <GeneralSettings>
        <Input>
            <MouseOption mouseMode="Simulate Mouse"/>
            <MouseOption scrollMode="Use mouse wheel"/>
            <MouseOption stuckCursorPolicy="If Cavebot on, Release Instantly"/>
            <MouseOption moveSpeed="Instantaneous"/>
            <MouseOption clickWaitMin="10" clickWaitMax="10"/>
            <KeyboardOption keyboardMode="Simulate Keyboard"/>
            <KeyboardOption stuckCtrlShiftPolicy="If Cavebot on, Release Instantly"/>
            <KeyboardOption typeWaitMin="30" typeWaitMax="30"/>
            <KeyboardOption pressWaitMin="30" pressWaitMax="30"/>
            <FocusOption focusPolicy="Don't auto-focus"/>
            <FocusOption openMenuPolicy="Confirm if cavebotting"/>
        </Input>
    </GeneralSettings>
    <Alerts disableSounds="no">
        <alert name="Player On Screen" playSound="no" pauseBot="no" logout="no" safeList="&lt;SafeList&gt;&#10;"/>
        <alert name="Player Attacking" playSound="no" pauseBot="no" logout="no" safeList="&lt;SafeList&gt;&#10;"/>
        <alert name="Monster Attacking" playSound="no" pauseBot="no" logout="no" safeList="&lt;SafeList&gt;&#10;"/>
        <alert name="Private Message" playSound="no" pauseBot="no" logout="no" safeList="&lt;SafeList&gt;&#10;"/>
        <alert name="Default Message" playSound="no" pauseBot="no" logout="no" safeList="&lt;SafeList&gt;&#10;"/>
        <alert name="GM Detected" playSound="no" pauseBot="no" logout="no"/>
        <alert name="Disconnected" playSound="no" pauseBot="no" logout="no"/>
        <alert name="Character Stuck" playSound="no" pauseBot="no" logout="no" standTime="30000"/>
        <alert name="Health Below" playSound="no" pauseBot="no" logout="no" healthPercent="50"/>
        <alert name="Mana Below" playSound="no" pauseBot="no" logout="no" manaPercent="50"/>
        <alert name="Unjust Kill" playSound="no" pauseBot="no" logout="no"/>
        <alert name="Enemies Online" playSound="no" pauseBot="no" logout="no" enemiesCount="50"/>
    </Alerts>
    <Cavebot enabled="yes">
        <Options>
            <Option shovel="3457"/>
            <Option rope="3003"/>
            <Option machete="3308"/>
            <Option pick="3456"/>
            <Option nodeRange="4"/>
            <Option pauseBotOnDeath="yes"/>
            <Option refillAmmo="no" refillAmmoMin="30" refillAmmoMax="70"/>
            <Option autoMount="no"/>
            <Option fireAvoidanceMin="0" fireAvoidanceMax="0"/>
            <Option energyAvoidanceMin="0" energyAvoidanceMax="0"/>
            <Option poisonAvoidanceMin="0" poisonAvoidanceMax="0"/>
            <Option walkThroughPlayers="no"/>
            <Option walkMethod="Walk With Arrow Keys"/>
            <Option walkableItems="7, 140, 404, 831, 832, 833, 834, 883, 1020, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2131, 2132, 2133, 2134, 2135, 2314, 2315, 2316, 2319, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2431, 2432, 2433, 2434, 2441, 2442, 2443, 2444, 2469, 2471, 2472, 2473, 2478, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2519, 2523, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2981, 2982, 2983, 2984, 2985, 2987, 2988, 3503, 3504, 3514, 3807, 5086, 5087, 5088, 6114, 6115, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6371, 6372, 7864, 8455, 8763, 9061, 9062, 10209, 10216, 10286, 10287, 10288, 11009, 11010, 11011, 11800, 11801, 11802, 11803, 11804, 11805, 11806, 11807, 11808, 11809, 11810, 17972"/>
            <Option mapWalkDistMin="20" mapWalkDistMax="30"/>
            <Option userOptionsScript="{&#10;&quot;type&quot; : &quot;scriptinfo&quot;, &#10;&quot;name&quot; : &quot;Darashia Tomb by Yoko&quot;, &#10;&quot;version&quot; : &quot;1.0.0&quot;&#10;},&#10;&#10;&#10;&#10;&#10;{&#10;&#10;&#10;    &quot;type&quot; : &quot;group&quot;,&#10;    &quot;name&quot; : &quot;Character Backpacks Setup&quot;,&#10;    &quot;children&quot; : [&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;mainbp&quot;,&#10;&quot;text&quot; : &quot;Main BP&quot;,&#10;&quot;description&quot; : &quot;Backpack on character's back&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                },&#10;&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;lootbp&quot;,&#10;&quot;text&quot; : &quot;Loot BP&quot;,&#10;&quot;description&quot; : &quot;Backpack for loot inside main backpack&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                },&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;goldbp&quot;,&#10;&quot;text&quot; : &quot;Gold BP&quot;,&#10;&quot;description&quot; : &quot;Backpack for gold inside main backpack&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                }&#10;    ]&#10;    },&#10;&#10;{&#10;    &quot;type&quot; : &quot;group&quot;,&#10;    &quot;name&quot; : &quot;Depot Backpacks Setup&quot;,&#10;&#9;&quot;column&quot; : 2,&#10;    &quot;children&quot; : [&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;maindpbp&quot;,&#10;&quot;text&quot; : &quot;Main Depot BP&quot;,&#10;&quot;description&quot; : &quot;Backpack inside depot chest&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                },&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;raredpbp&quot;,&#10;&quot;text&quot; : &quot;Rare Depot BP&quot;,&#10;&quot;description&quot; : &quot;Backpack for rare items inside main depot backpack&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                },&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;foodbp&quot;,&#10;&quot;text&quot; : &quot;Food BP&quot;,&#10;&quot;description&quot; : &quot;Backpack for food&quot;,&#10; &quot;items&quot; : [&quot;Anniversary Backpack[[item: Anniversary Backpack]]&quot;,&quot;Brown Backpack[[item: Brown Backpack]]&quot;,&quot;Backpack of Holding[[item: Backpack of Holding]]&quot;,&quot;Beach Backpack[[item: Beach Backpack]]&quot;,&quot;Blue Backpack[[item: Blue Backpack]]&quot;,&quot;Brocade Backpack[[item: Brocade Backpack]]&quot;,&quot;Buggy Backpack[[item: Buggy Backpack]]&quot;,&quot;Cake Backpack[[item: Cake Backpack]]&quot;, &quot;Camouflage Backpack[[item: Camouflage Backpack]]&quot;,&quot;Crown Backpack[[item: Crown Backpack]]&quot;,&quot;Crystal Backpack[[item: Crystal backpack]]&quot;,&quot;Deepling Backpack[[item: Deepling Backpack]]&quot;,&quot;Demon Backpack[[item: Demon Backpack]]&quot;,&quot;Dragon Backpack[[item: Dragon Backpack]]&quot;,&quot;Expedition Backpack[[item: Expedition Backpack]]&quot;,&quot;Feedbag[[item: Feedbag]]&quot;,&quot;Fur Backpack[[item: Fur Backpack]]&quot;,&quot;Glooth Backpack[[item: Glooth Backpack]]&quot;,&quot;Golden Backpack[[item: Golden Backpack]]&quot;,&quot;Green Backpack[[item: Green Backpack]]&quot;,&quot;Grey Backpack[[item: Grey Backpack]]&quot;,&quot;Heart Backpack[[item: Heart Backpack]]&quot;,&quot;Jewelled Backpack[[item: Jewelled Backpack]]&quot;,&quot;Minotaur Backpack[[item: Minotaur Backpack]]&quot;,&quot;Moon Backpack[[item: Moon Backpack]]&quot;,&quot;Mushroom Backpack[[item: Mushroom Backpack]]&quot;,&quot;Orange Backpack[[item: Orange Backpack]]&quot;,&quot;Pannier Backpack[[item: Pannier Backpack]]&quot;,&quot;Pirate Backpack[[item: Pirate Backpack]]&quot;,&quot;Purple Backpack[[item: Purple Backpack]]&quot;,&quot;Red Backpack[[item: Red Backpack]]&quot;,&quot;Santa Backpack[[item: Santa Backpack]]&quot;,&quot;Shopping Bag[[item: Shopping Bag]]&quot;,&quot;Yellow Backpack[[item: Yellow Backpack]]&quot;,&quot;Zaoan Chess Box[[item: Zaoan Chess Box]]&quot;]&#10;                }&#10;    ]&#10;    },&#10;&#10;{&#10;    &quot;type&quot; : &quot;group&quot;,&#10;    &quot;name&quot; : &quot;Supplies setup&quot;,&#10;&#9;&quot;column&quot; : 2,&#10;    &quot;children&quot; : [&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;mptype&quot;,&#10;&quot;text&quot; : &quot;Type of mana potion&quot;,&#10; &quot;items&quot; : [&quot;Mana Potion [[item: mana potion]]&quot;,&quot;Strong Mana Potion[[item:strong mana potion]]&quot;]&#10;},&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;maxmp&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Max Mana Potion&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; MP&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 10&#10;&#9;&#9;&#9;&#9;},&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;minmp&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Min Mana Potions&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; MP&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 2&#10;&#9;&#9;&#9;&#9;},&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;hptype&quot;,&#10;&quot;text&quot; : &quot;Type of health potion&quot;,&#10; &quot;items&quot; : [&quot;Health Potion [[item: Health potion]]&quot;,&quot;Strong Health Potion[[item:strong Health potion]]&quot;]&#10;},&#10;&#10;&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;maxhp&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Max Health Potion&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; HP&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 10&#10;&#9;&#9;&#9;&#9;},&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;minhp&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Min Health Potions&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; HP&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 2&#10;&#9;&#9;&#9;&#9;},&#10;&#10;{&#10;&quot;type&quot; : &quot;combobox&quot;,&#10;&quot;name&quot; : &quot;ammotype&quot;,&#10;&quot;text&quot; : &quot;Type of spear&quot;,&#10; &quot;items&quot; : [&quot;Spear[[item: spear]]&quot;,&quot;Throwing Star[[item: Throwing Star]]&quot;,&quot;Royal Spear[[item: royal spear]]&quot;]&#10;},&#10;&#10;&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;maxammo&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Max Spears&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; Spears&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 10&#10;&#9;&#9;&#9;&#9;},&#10;&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;minammo&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Min Spears&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;suffix&quot; : &quot; Spears&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 2&#10;&#9;&#9;&#9;&#9;}&#10;    ]&#10;    },&#10;{&#10;    &quot;type&quot; : &quot;group&quot;,&#10;    &quot;name&quot; : &quot;Extra Options&quot;,&#10;    &quot;children&quot; : [&#10;{&#10;&#9;&quot;type&quot; : &quot;checkbox&quot;,&#10;&quot;name&quot; : &quot;usealertonspawn&quot;,&#10;&quot;text&quot; : &quot;Player On Spawn Alert&quot;,&#10;&quot;description&quot; : &quot;If Checked, bot will alert you if someone enter spawn&quot;,&#10;&quot;value&quot; : false&#9;&#10;&#10;},&#10;{&#10;&#9;&quot;type&quot; : &quot;checkbox&quot;,&#10;&quot;name&quot; : &quot;huntlowerlvl&quot;,&#10;&quot;text&quot; : &quot;Hunt Lower Level (3 Crypt Shamblers)&quot;,&#10;&quot;value&quot; : false&#9;&#10;&#10;},&#10;{&#10;&#9;&quot;type&quot; : &quot;checkbox&quot;,&#10;&quot;name&quot; : &quot;takefoodfromdp&quot;,&#10;&quot;text&quot; : &quot;Take food from depot&quot;,&#10;&quot;value&quot; : false&#9;&#10;&#10;},&#10;{&#10;&#9;&quot;type&quot; : &quot;lineedit&quot;,&#10;&quot;name&quot; : &quot;foodtype&quot;,&#10;&quot;text&quot; : &quot;Food to take&quot;,&#10;&quot;value&quot; : &quot;Brown mushroom&quot;&#9;&#10;&#10;},&#10;{&#10;&#9;&#9;&#9;&#9;&#9;&quot;type&quot;   : &quot;spinbox&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;name&quot;   : &quot;amountoffood&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;text&quot;   : &quot;Amount of food&quot;,&#10;&#9;&#9;&#9;&#9;&#9;&quot;min&quot;&#9; : 0,&#10;&#9;&#9;&#9;&#9;&#9;&quot;max&quot;&#9; : 1000,&#10;       &#9;&#9;&#9;&#9;&quot;value&quot;  : 100&#10;&#9;&#9;&#9;&#9;}&#10;&#10;&#10;&#10;&#10;&#10;]&#10;}"/>
        </Options>
        <SpecialAreas>
            <Area name="SArea" x="33272" y="32462" z="9" type="Square (Filled)" width="1" height="4" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea1" x="33272" y="32453" z="9" type="Square (Filled)" width="1" height="3" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="None" ignoreWhenLuring="yes" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea2" x="33258" y="32452" z="9" type="Square (Filled)" width="6" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea3" x="33261" y="32443" z="9" type="Square (Filled)" width="1" height="3" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea4" x="33257" y="32443" z="9" type="Square (Filled)" width="1" height="3" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea5" x="33258" y="32442" z="9" type="Square (Filled)" width="3" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea6" x="33258" y="32471" z="9" type="Square (Filled)" width="3" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="None" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea7" x="33261" y="32472" z="9" type="Square (Filled)" width="1" height="3" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea8" x="33258" y="32475" z="9" type="Square (Filled)" width="3" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea9" x="33257" y="32462" z="9" type="Square (Filled)" width="1" height="4" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea10" x="33261" y="32463" z="9" type="Square (Filled)" width="1" height="3" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea11" x="33269" y="32470" z="10" type="Square (Filled)" width="2" height="7" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="None" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea12" x="33268" y="32471" z="10" type="Square (Filled)" width="7" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="None" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea13" x="33274" y="32471" z="10" type="Square (Filled)" width="1" height="5" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="None" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
            <Area name="SArea14" x="33269" y="32476" z="10" type="Square (Filled)" width="5" height="1" avoidance="250" waitTimeMin="0" waitTimeMax="0" policy="Targeting" ignoreWhenLuring="no" ignoreWhenLooting="no" comment=""/>
        </SpecialAreas>
        <CavebotScripts/>
        <WaypointSection name="Refill">
            <Waypoint type="Stand" x="33215" y="32454" z="7" rangeX="1" rangeY="1" label="start"/>
            <Waypoint type="Stand" x="33215" y="32455" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33218" y="32460" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33218" y="32460" z="8" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;start&quot;)&#10;end"/>
            <Waypoint type="Action" x="33218" y="32460" z="8" rangeX="1" rangeY="1" script="depot()&#10;if getuseroption('takefoodfromdp') then&#10;takefood()&#10;end&#10;"/>
            <Waypoint type="Action" x="33217" y="32461" z="8" rangeX="1" rangeY="1" script="-- zrobic brown mushroomy"/>
            <Waypoint type="Stand" x="33215" y="32459" z="8" rangeX="1" rangeY="1" label="gobank"/>
            <Waypoint type="Stand" x="33215" y="32455" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33215" y="32449" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33217" y="32444" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33217" y="32437" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33220" y="32431" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33220" y="32425" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33217" y="32418" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33216" y="32408" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33216" y="32398" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33216" y="32390" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33221" y="32387" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33221" y="32387" z="7" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;gobank&quot;)&#10;end"/>
            <Waypoint type="Action" x="33221" y="32387" z="7" rangeX="1" rangeY="1" script="withdrawmoney()"/>
            <Waypoint type="Stand" x="33217" y="32402" z="7" rangeX="1" rangeY="1" label="mshop"/>
            <Waypoint type="Action" x="33217" y="32402" z="7" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;mshop&quot;)&#10;end"/>
            <Waypoint type="Action" x="33217" y="32402" z="7" rangeX="1" rangeY="1" script="suppshop()"/>
            <Waypoint type="Stand" x="33216" y="32404" z="7" rangeX="1" rangeY="1" label="goforspears"/>
            <Waypoint type="Stand" x="33217" y="32414" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33224" y="32418" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33228" y="32422" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33230" y="32429" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33230" y="32429" z="7" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;goforspears&quot;)&#10;end"/>
            <Waypoint type="Action" x="33230" y="32429" z="7" rangeX="1" rangeY="1" script="ammoshop()"/>
            <Waypoint type="Stand" x="33230" y="32432" z="7" rangeX="1" rangeY="1" label="gohunt"/>
            <Waypoint type="Action" x="33230" y="32432" z="7" rangeX="1" rangeY="1" script="if itemcount(mptype) + 1 &lt; maxmp or itemcount(hptype)+1 &lt; maxhp or itemcount(ammotype) &lt; maxammo then&#10;gotolabel(&quot;start&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33237" y="32436" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33246" y="32436" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33256" y="32436" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33265" y="32436" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33278" y="32437" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33278" y="32437" z="7" rangeX="1" rangeY="1" script="if not islocation(1) then&#10;gotolabel(&quot;gohunt&quot;)&#10;end"/>
            <Waypoint type="Action" x="33278" y="32437" z="7" rangeX="1" rangeY="1" script="bpsforhunt()"/>
            <Waypoint type="Stand" x="33281" y="32440" z="7" rangeX="1" rangeY="1" label="enterdown"/>
            <Waypoint type="Stand" x="33281" y="32445" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33281" y="32446" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33281" y="32446" z="8" rangeX="1" rangeY="1" script="if not islocation(1) then&#10;gotolabel(&quot;enterdown&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33281" y="32446" z="8" rangeX="1" rangeY="1" label="opencoffin"/>
            <Waypoint type="Stand" x="33283" y="32449" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33281" y="32446" z="8" rangeX="1" rangeY="1" script="while topitem(33284, 32450, 8).id == 2063 do&#10;useitem(2063, ground(33284, 32450, 8))&#10;end"/>
            <Waypoint type="Stand" x="33279" y="32449" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33279" y="32449" z="8" rangeX="1" rangeY="1" script="while topitem(33278, 32450, 8).id == 2063 do&#10;useitem(2063, ground(33278, 32450, 8))&#10;end"/>
            <Waypoint type="Stand" x="33277" y="32445" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33277" y="32445" z="8" rangeX="1" rangeY="1" script="while topitem(33276, 32444,8).id == 2063 do&#10;useitem(2063, ground(33276, 32444,8))&#10;end"/>
            <Waypoint type="Action" x="33277" y="32445" z="8" rangeX="1" rangeY="1" script="if topitem(33281,32442, 8).id == 2063 then&#10;gotolabel(&quot;skip1zapalony&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33280" y="32443" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33280" y="32443" z="8" rangeX="1" rangeY="1" script="while topitem(33281,32442, 8).id == 2062 do&#10;useitem(2062, ground(33281,32442, 8))&#10;end"/>
            <Waypoint type="Stand" x="33280" y="32446" z="8" rangeX="1" rangeY="1" label="skip1zapalony"/>
            <Waypoint type="Action" x="33280" y="32446" z="8" rangeX="1" rangeY="1" script="if topitem(33286,32444, 8).id == 2063 then&#10;gotolabel(&quot;skip2zapalony&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33285" y="32445" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33285" y="32445" z="8" rangeX="1" rangeY="1" script="while topitem(33286,32444, 8).id == 2062 do&#10;useitem(2062, ground(33286,32444, 8))&#10;end"/>
            <Waypoint type="Stand" x="33280" y="32448" z="8" rangeX="1" rangeY="1" label="skip2zapalony"/>
            <Waypoint type="Action" x="33280" y="32448" z="8" rangeX="1" rangeY="1" script="for i=1,3 do&#10;useitem(7534, ground(33281,32447, 8))&#10;end"/>
            <Waypoint type="Stand" x="33277" y="32451" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33276" y="32451" z="8" rangeX="1" rangeY="1" script="if (topitem(33276,32451,8).id) == 5124 then&#10;usedoor(33276,32451,8, 'open')&#10;end"/>
            <Waypoint type="Stand" x="33273" y="32457" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33273" y="32457" z="8" rangeX="1" rangeY="1" script="if not islocation(1) then&#10;gotolabel(&quot;skip2zapalony&quot;)&#10;end"/>
            <Waypoint type="Action" x="33273" y="32457" z="8" rangeX="1" rangeY="1" script="if (topitem(33273,32458,8).id) == 167 then&#10;gotolabel(&quot;enterhunt&quot;)&#10;else&#10;gotolabel(&quot;openagain&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33273" y="32457" z="8" rangeX="1" rangeY="1" label="openagain"/>
            <Waypoint type="Stand" x="33275" y="32451" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33275" y="32451" z="8" rangeX="1" rangeY="1" script="if (topitem(33276,32451,8).id) == 5124 then&#10;usedoor(33276,32451,8, 'open')&#10;end"/>
            <Waypoint type="Stand" x="33278" y="32448" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33278" y="32448" z="8" rangeX="1" rangeY="1" script="if not islocation(1) then&#10;gotolabel(&quot;openagain&quot;)&#10;else&#10;gotolabel(&quot;opencoffin&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33273" y="32457" z="8" rangeX="1" rangeY="1" label="enterhunt"/>
            <Waypoint type="Lure" x="33275" y="32455" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33273" y="32458" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33274" y="32457" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33274" y="32457" z="9" rangeX="1" rangeY="1" script="if not islocation(1) then&#10;gotolabel(&quot;enterhunt&quot;)&#10;else&#10;setsetting('Targeting/Creatures/Crypt Shambler/Setting1/OnlyIfTrapped', 'no')&#10;setsetting('Targeting/Creatures/ghoul/Setting1/OnlyIfTrapped', 'no')&#10;setsetting('Targeting/Creatures/Skeleton/Setting1/OnlyIfTrapped', 'no')&#10;gotolabel(&quot;start&quot;,&quot;Hunt&quot;)&#10;end"/>
        </WaypointSection>
        <WaypointSection name="Hunt">
            <Waypoint type="Stand" x="33274" y="32457" z="9" rangeX="1" rangeY="1" label="start"/>
            <Waypoint type="Lure" x="33275" y="32463" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33266" y="32454" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33260" y="32454" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33253" y="32454" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33259" y="32445" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33253" y="32435" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33263" y="32435" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33271" y="32444" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33250" y="32444" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33241" y="32444" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33240" y="32450" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33240" y="32458" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33240" y="32464" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33240" y="32468" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33243" y="32473" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33252" y="32473" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33256" y="32473" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33259" y="32481" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33268" y="32482" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33277" y="32482" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33260" y="32481" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33265" y="32473" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33270" y="32473" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Lure" x="33273" y="32473" z="10" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33270" y="32473" z="9" rangeX="1" rangeY="1" script="if not huntlowerlvl then&#10;gotolabel(&quot;skiplowerlvl&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33272" y="32473" z="9" rangeX="1" rangeY="1" label="enterlowerlvl"/>
            <Waypoint type="Stand" x="33273" y="32472" z="10" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33273" y="32472" z="10" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;enterlowerlvl&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33271" y="32460" z="10" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33271" y="32483" z="10" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33272" y="32475" z="10" rangeX="1" rangeY="1" label="backup"/>
            <Waypoint type="Stand" x="33272" y="32474" z="10" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33270" y="32474" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33270" y="32474" z="9" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;backup&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33259" y="32470" z="9" rangeX="1" rangeY="1" label="skiplowerlvl"/>
            <Waypoint type="Stand" x="33259" y="32464" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33268" y="32463" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33274" y="32460" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33274" y="32458" z="9" rangeX="1" rangeY="1"/>
        </WaypointSection>
        <WaypointSection name="Leave">
            <Waypoint type="Stand" x="33274" y="32458" z="9" rangeX="1" rangeY="1" label="start"/>
            <Waypoint type="Stand" x="33273" y="32458" z="9" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33275" y="32451" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33275" y="32451" z="8" rangeX="1" rangeY="1" script="if (topitem(33276,32451,8).id) == 5124 then&#10;usedoor(33276,32451,8, 'open')&#10;end"/>
            <Waypoint type="Stand" x="33278" y="32449" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33281" y="32445" z="8" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33281" y="32440" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33281" y="32440" z="7" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;start&quot;)&#10;end"/>
            <Waypoint type="Stand" x="33277" y="32439" z="7" rangeX="1" rangeY="1" label="backtodp"/>
            <Waypoint type="Stand" x="33271" y="32435" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33261" y="32435" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33251" y="32435" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33241" y="32435" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33231" y="32436" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33219" y="32439" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33218" y="32447" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Stand" x="33214" y="32454" z="7" rangeX="1" rangeY="1"/>
            <Waypoint type="Action" x="33214" y="32454" z="7" rangeX="1" rangeY="1" script="if not islocation(3) then&#10;gotolabel(&quot;backtodp&quot;)&#10;else&#10;gotolabel(&quot;start&quot;,&quot;Refill&quot;)&#10;end"/>
        </WaypointSection>
    </Cavebot>
    <Looting enabled="yes">
        <Options>
            <Option range="10"/>
            <Option moveItemsQuickly="yes"/>
            <Option eatFoodFromCorpse="yes"/>
            <Option openNextBP="no"/>
            <Option openBPsAtLogin="no"/>
            <Option valuableBodies="3000"/>
            <Option ultraValuableBodies="50000"/>
            <Option alertOnValuableBodies="no"/>
            <Option openValuableBodiesOnly="no"/>
            <Option openUltraValuableBodiesImmediately="no"/>
            <Option policy="Smart Looting"/>
            <LootingDestinations>
                <lootingDestination name="lootbp" destination="brocade backpack"/>
                <lootingDestination name="mainbp" destination="glooth backpack"/>
                <lootingDestination name="goldbp" destination="golden backpack"/>
                <lootingDestination name="maindpbp" destination="blue backpack"/>
                <lootingDestination name="raredpbp" destination="grey backpack"/>
            </LootingDestinations>
        </Options>
        <LootingProfile name="LootList" isCurrentProfile="yes">
            <LootItem name="gold coin" id="3031" sellPrice="1" weight="0.10" destinationName="goldbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="small diamond" id="3028" sellPrice="300" weight="0.10" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="rotten piece of cloth" id="10291" sellPrice="30" weight="0.60" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="half-digested piece of meat" id="10283" sellPrice="55" weight="1.24" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="ghoul snack" id="11467" sellPrice="60" weight="1.40" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="pile of grave earth" id="11484" sellPrice="25" weight="0.98" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="pelvis bone" id="11481" sellPrice="30" weight="1.30" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="brown piece of cloth" id="5913" sellPrice="100" weight="5.00" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
            <LootItem name="life ring" id="3052" sellPrice="50" weight="0.80" destinationName="lootbp" action="Loot" lootCondition="Has Cap to Loot" itemCategory="" alertOnDrop="no" alertOnMiss="no"/>
        </LootingProfile>
    </Looting>
    <Supplies>
        <Options>
            <Option defaultBackpack=""/>
            <Option extraCashMin="1000" extraCashMax="2500"/>
            <Option autoSwitchProfiles="no"/>
        </Options>
        <SupplyProfile name="SupplyList" vocation="Paladin" level="273" isCurrentProfile="yes">
            <SupplyItem name="spear" id="3277" buyPrice="9" weight="20.00" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="throwing star" id="3287" buyPrice="42" weight="2.00" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="mana potion" id="268" buyPrice="50" weight="2.70" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="health potion" id="266" buyPrice="45" weight="2.70" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="strong mana potion" id="237" buyPrice="80" weight="2.90" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="royal spear" id="7378" buyPrice="15" weight="25.00" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
            <SupplyItem name="strong health potion" id="236" buyPrice="100" weight="2.90" leaveCaveAt="0" rule="Up to..." ruleValue="0" destination="" category=""/>
        </SupplyProfile>
    </Supplies>
    <Targeting enabled="yes" allowDiagonalMovement="no" autoSwitchProfiles="no" nonPvPMode="no">
        <TargetingProfile name="TargetList" vocation="Paladin" level="273" targetMustBeShootable="no" targetMustBeReachable="yes" isCurrentProfile="yes">
            <Priorities>
                <Priority health="20"/>
                <Priority proximity="30"/>
                <Priority danger="10"/>
                <Priority random="0"/>
                <Priority lure="30"/>
                <Priority stick="2"/>
            </Priorities>
            <Creatures>
                <Creature name="Crypt Shambler" amount="Any" category="" dontLoot="no" playAlarm="no" syncSpells="no">
                    <FightingSettings>
                        <Setting index="0" hpFrom="0" hpTo="100" danger="3" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="Lure &amp; Keep Away" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="1" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="2" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="3" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                    </FightingSettings>
                </Creature>
                <Creature name="ghoul" amount="Any" category="" dontLoot="no" playAlarm="no" syncSpells="no">
                    <FightingSettings>
                        <Setting index="0" hpFrom="0" hpTo="100" danger="1" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="Lure &amp; Keep Away" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="1" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="2" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="3" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                    </FightingSettings>
                </Creature>
                <Creature name="Skeleton" amount="Any" category="" dontLoot="no" playAlarm="no" syncSpells="no">
                    <FightingSettings>
                        <Setting index="0" hpFrom="0" hpTo="100" danger="1" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="Lure &amp; Keep Away" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="1" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="2" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="3" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                    </FightingSettings>
                </Creature>
                <Creature name="rat" amount="Any" category="" dontLoot="no" playAlarm="no" syncSpells="no">
                    <FightingSettings>
                        <Setting index="0" hpFrom="0" hpTo="100" danger="0" onlyIfTrapped="yes" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="1" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="2" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="3" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                    </FightingSettings>
                </Creature>
                <Creature name="Cave Rat" amount="Any" category="" dontLoot="no" playAlarm="no" syncSpells="no">
                    <FightingSettings>
                        <Setting index="0" hpFrom="0" hpTo="100" danger="0" onlyIfTrapped="yes" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="1" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="2" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                        <Setting index="3" hpFrom="0" hpTo="0" danger="0" onlyIfTrapped="no" mustAttackMe="no" action="Attack" avoidance="No Avoidance" desiredStance="No Movement" distance="3" attackMode="No Change" firstSpell="" secondSpell="" thirdSpell="" fourthSpell="" spamMin="300" spamMax="500"/>
                    </FightingSettings>
                </Creature>
            </Creatures>
        </TargetingProfile>
    </Targeting>
    <OtherBots>
        <HealingPaths/>
        <TargetingPaths/>
    </OtherBots>
</WindbotSettings>
